/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'sonix_burn.exe'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct HINSTANCE__;
struct tagRECT;
struct HRSRC__;
struct HWND__;
struct HKEY__;
struct tagWINDOWPLACEMENT;
struct HDC__;
struct tagSCROLLINFO;
struct tagWNDCLASSW;
struct HICON__;
struct HBRUSH__;
struct tagWNDCLASSEXW;
struct HMENU__;
struct tagMSG;
struct HBITMAP__;
struct HPALETTE__;
struct _RTL_CRITICAL_SECTION;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct tagBITMAPINFOHEADER;
struct HACCEL__;
struct tagACCEL;
struct HRGN__;
struct _BLENDFUNCTION;
struct tagBITMAPINFO;
struct IStream;
struct IStreamVtbl;
union _ULARGE_INTEGER;
struct tagSTATSTG;
struct _SYSTEMTIME;
struct IDataObject;
struct IDataObjectVtbl;
struct tagFORMATETC;
struct tagDVTARGETDEVICE;
struct tagSTGMEDIUM;
struct HENHMETAFILE__;
struct IStorage;
struct IStorageVtbl;
struct IEnumSTATSTG;
struct IEnumSTATSTGVtbl;
struct IUnknown;
struct IUnknownVtbl;
struct IEnumFORMATETC;
struct IEnumFORMATETCVtbl;
struct IAdviseSink;
struct IAdviseSinkVtbl;
struct IMoniker;
struct IMonikerVtbl;
struct IBindCtx;
struct IBindCtxVtbl;
struct tagBIND_OPTS;
struct IRunningObjectTable;
struct IRunningObjectTableVtbl;
struct IEnumMoniker;
struct IEnumMonikerVtbl;
struct IEnumString;
struct IEnumStringVtbl;
struct IEnumSTATDATA;
struct IEnumSTATDATAVtbl;
struct tagSTATDATA;
struct tagVARIANT;
struct IDispatch;
struct IDispatchVtbl;
struct ITypeInfo;
struct ITypeInfoVtbl;
struct tagTYPEATTR;
struct tagTYPEDESC;
struct tagARRAYDESC;
struct ITypeComp;
struct ITypeCompVtbl;
union tagBINDPTR;
struct tagFUNCDESC;
struct tagELEMDESC;
struct tagPARAMDESCEX;
struct tagVARDESC;
struct tagDISPPARAMS;
struct tagEXCEPINFO;
struct ITypeLib;
struct ITypeLibVtbl;
struct tagTLIBATTR;
struct tagSAFEARRAY;
struct tagDEC;
struct IRecordInfo;
struct IRecordInfoVtbl;
struct _ICONINFO;
struct _EXCEPTION_RECORD;
struct _CONTEXT;
struct _devicemodeW;
struct _PRINTER_DEFAULTSW;
struct tagOLEUIBUSYW;
struct HTASK__;
struct HIMC__;
struct __crt_locale_pointers;
struct _s_ThrowInfo;
struct _s_CatchableTypeArray;
struct _s_CatchableType;
struct _iobuf;
struct HMONITOR__;
struct tagMONITORINFO;
struct tagDRAWTEXTPARAMS;
struct _ITEMIDLIST;
struct ILockBytes;
struct ILockBytesVtbl;
struct HDROP__;
struct tagINITCOMMONCONTROLSEX;
struct _SHELLEXECUTEINFOW;
struct _SHFILEINFOW;
struct IOleObject;
struct IOleClientSite;
struct IOleClientSiteVtbl;
struct IOleContainer;
struct IOleContainerVtbl;
struct IEnumUnknown;
struct IEnumUnknownVtbl;
struct IEnumOLEVERB;
struct IEnumOLEVERBVtbl;
struct tagOLEVERB;
struct tagLOGPALETTE;
struct IPropertyNotifySink;
struct IOleInPlaceObject;
struct IOleInPlaceSite;
struct IOleInPlaceFrame;
struct IOleInPlaceFrameVtbl;
struct IOleInPlaceActiveObject;
struct IOleInPlaceActiveObjectVtbl;
struct IOleInPlaceUIWindow;
struct IOleInPlaceUIWindowVtbl;
struct tagOleMenuGroupWidths;

/* 1 */
struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 2 */
typedef struct _GUID GUID;

/* 3 */
typedef struct HINSTANCE__ *HINSTANCE;

/* 4 */
struct HINSTANCE__
{
  int unused;
};

/* 7 */
typedef unsigned __int16 wchar_t;

/* 6 */
typedef wchar_t WCHAR;

/* 5 */
typedef WCHAR *LPWSTR;

/* 8 */
enum __bitmask __TI_flags
{
  TI_IsConst = 0x1,
  TI_IsVolatile = 0x2,
  TI_IsUnaligned = 0x4,
  TI_IsPure = 0x8,
  TI_IsWinRT = 0x10,
};

/* 9 */
enum __bitmask __CT_flags
{
  CT_IsSimpleType = 0x1,
  CT_ByReferenceOnly = 0x2,
  CT_HasVirtualBase = 0x4,
  CT_IsWinRTHandle = 0x8,
  CT_IsStdBadAlloc = 0x10,
};

/* 10 */
struct _EH4_SCOPETABLE_RECORD
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 12 */
typedef unsigned int DWORD;

/* 11 */
struct _EH4_SCOPETABLE
{
  DWORD GSCookieOffset;
  DWORD GSCookieXOROffset;
  DWORD EHCookieOffset;
  DWORD EHCookieXOROffset;
  struct _EH4_SCOPETABLE_RECORD ScopeRecord[];
};

/* 13 */
typedef void *PVOID;

/* 14 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 15 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 16 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 17 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 18 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 20 */
typedef char CHAR;

/* 19 */
typedef const CHAR *LPCCH;

/* 21 */
typedef struct tagRECT *LPRECT;

/* 23 */
typedef int LONG;

/* 22 */
struct tagRECT
{
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
};

/* 24 */
typedef unsigned int UINT;

/* 26 */
typedef unsigned int UINT_PTR;

/* 25 */
typedef UINT_PTR WPARAM;

/* 28 */
typedef int LONG_PTR;

/* 27 */
typedef LONG_PTR LPARAM;

/* 29 */
typedef HINSTANCE HMODULE;

/* 30 */
typedef struct HRSRC__ *HRSRC;

/* 31 */
struct HRSRC__
{
  int unused;
};

/* 32 */
typedef int BOOL;

/* 33 */
typedef GUID IID;

/* 34 */
typedef void *LPVOID;

/* 35 */
typedef const WCHAR *LPCWCH;

/* 36 */
typedef const WCHAR *LPCWSTR;

/* 37 */
typedef void *HANDLE;

/* 38 */
typedef const CHAR *PCNZCH;

/* 39 */
typedef CHAR *LPSTR;

/* 40 */
typedef DWORD LCID;

/* 41 */
typedef const CHAR *LPCSTR;

/* 42 */
typedef unsigned __int16 WORD;

/* 44 */
typedef WCHAR OLECHAR;

/* 43 */
typedef const OLECHAR *LPCOLESTR;

/* 45 */
typedef GUID CLSID;

/* 46 */
typedef struct HWND__ *HWND;

/* 47 */
struct HWND__
{
  int unused;
};

/* 48 */
typedef OLECHAR *BSTR;

/* 49 */
typedef struct HKEY__ *HKEY;

/* 50 */
struct HKEY__
{
  int unused;
};

/* 51 */
typedef unsigned __int8 BYTE;

/* 52 */
typedef int INT;

/* 53 */
typedef int INT_PTR;

/* 54 */
typedef HANDLE HGLOBAL;

/* 55 */
struct _OSVERSIONINFOA
{
  DWORD dwOSVersionInfoSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformId;
  CHAR szCSDVersion[128];
};

/* 56 */
typedef struct tagWINDOWPLACEMENT WINDOWPLACEMENT;

/* 59 */
struct tagPOINT
{
  LONG x;
  LONG y;
};

/* 58 */
typedef struct tagPOINT POINT;

/* 60 */
typedef struct tagRECT RECT;

/* 57 */
struct tagWINDOWPLACEMENT
{
  UINT length;
  UINT flags;
  UINT showCmd;
  POINT ptMinPosition;
  POINT ptMaxPosition;
  RECT rcNormalPosition;
};

/* 61 */
typedef struct HDC__ *HDC;

/* 62 */
struct HDC__
{
  int unused;
};

/* 64 */
typedef struct tagSCROLLINFO SCROLLINFO;

/* 63 */
typedef const SCROLLINFO *LPCSCROLLINFO;

/* 65 */
struct tagSCROLLINFO
{
  UINT cbSize;
  UINT fMask;
  int nMin;
  int nMax;
  UINT nPage;
  int nPos;
  int nTrackPos;
};

/* 66 */
typedef struct tagSCROLLINFO *LPSCROLLINFO;

/* 67 */
typedef DWORD COLORREF;

/* 68 */
typedef struct tagWNDCLASSW *LPWNDCLASSW;

/* 71 */
typedef LONG_PTR LRESULT;

/* 70 */
typedef LRESULT (__stdcall *WNDPROC)(HWND, UINT, WPARAM, LPARAM);

/* 72 */
typedef struct HICON__ *HICON;

/* 74 */
typedef HICON HCURSOR;

/* 75 */
typedef struct HBRUSH__ *HBRUSH;

/* 69 */
struct tagWNDCLASSW
{
  UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCWSTR lpszMenuName;
  LPCWSTR lpszClassName;
};

/* 73 */
struct HICON__
{
  int unused;
};

/* 76 */
struct HBRUSH__
{
  int unused;
};

/* 77 */
typedef struct tagWNDCLASSEXW *LPWNDCLASSEXW;

/* 78 */
struct tagWNDCLASSEXW
{
  UINT cbSize;
  UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCWSTR lpszMenuName;
  LPCWSTR lpszClassName;
  HICON hIconSm;
};

/* 79 */
typedef struct HMENU__ *HMENU;

/* 80 */
struct HMENU__
{
  int unused;
};

/* 81 */
typedef struct tagPOINT *LPPOINT;

/* 82 */
typedef int *LPINT;

/* 83 */
typedef const WCHAR *PCNZWCH;

/* 84 */
typedef struct tagMSG *LPMSG;

/* 85 */
struct tagMSG
{
  HWND hwnd;
  UINT message;
  WPARAM wParam;
  LPARAM lParam;
  DWORD time;
  POINT pt;
};

/* 86 */
typedef struct tagMSG MSG;

/* 87 */
struct _OSVERSIONINFOW
{
  DWORD dwOSVersionInfoSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformId;
  WCHAR szCSDVersion[128];
};

/* 88 */
struct tagSIZE
{
  LONG cx;
  LONG cy;
};

/* 90 */
typedef unsigned int ULONG_PTR;

/* 89 */
typedef ULONG_PTR SIZE_T;

/* 91 */
typedef WORD CLIPFORMAT;

/* 92 */
typedef struct HBITMAP__ *HBITMAP;

/* 93 */
struct HBITMAP__
{
  int unused;
};

/* 94 */
typedef void *HGDIOBJ;

/* 95 */
typedef struct HPALETTE__ *HPALETTE;

/* 96 */
struct HPALETTE__
{
  int unused;
};

/* 97 */
typedef const void *LPCVOID;

/* 100 */
struct _FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
};

/* 99 */
typedef struct _FILETIME FILETIME;

/* 98 */
struct _WIN32_FIND_DATAW
{
  DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD dwReserved0;
  DWORD dwReserved1;
  WCHAR cFileName[260];
  WCHAR cAlternateFileName[14];
};

/* 101 */
struct _SECURITY_ATTRIBUTES
{
  DWORD nLength;
  LPVOID lpSecurityDescriptor;
  BOOL bInheritHandle;
};

/* 103 */
typedef struct _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;

/* 102 */
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

/* 105 */
typedef struct _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;

/* 104 */
#pragma pack(push, 8)
struct _RTL_CRITICAL_SECTION
{
  PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
  LONG LockCount;
  LONG RecursionCount;
  HANDLE OwningThread;
  HANDLE LockSemaphore;
  ULONG_PTR SpinCount;
};
#pragma pack(pop)

/* 108 */
struct _LIST_ENTRY
{
  struct _LIST_ENTRY *Flink;
  struct _LIST_ENTRY *Blink;
};

/* 107 */
typedef struct _LIST_ENTRY LIST_ENTRY;

/* 106 */
struct _RTL_CRITICAL_SECTION_DEBUG
{
  WORD Type;
  WORD CreatorBackTraceIndex;
  struct _RTL_CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;
  DWORD Flags;
  WORD CreatorBackTraceIndexHigh;
  WORD SpareWORD;
};

/* 109 */
#pragma pack(push, 1)
struct _AppBarData
{
  DWORD cbSize;
  HWND hWnd;
  UINT uCallbackMessage;
  UINT uEdge;
  RECT rc;
  LPARAM lParam;
};
#pragma pack(pop)

/* 110 */
typedef struct tagBITMAPINFOHEADER BITMAPINFOHEADER;

/* 111 */
struct tagBITMAPINFOHEADER
{
  DWORD biSize;
  LONG biWidth;
  LONG biHeight;
  WORD biPlanes;
  WORD biBitCount;
  DWORD biCompression;
  DWORD biSizeImage;
  LONG biXPelsPerMeter;
  LONG biYPelsPerMeter;
  DWORD biClrUsed;
  DWORD biClrImportant;
};

/* 112 */
#pragma pack(push, 4)
struct tagTEXTMETRICW
{
  LONG tmHeight;
  LONG tmAscent;
  LONG tmDescent;
  LONG tmInternalLeading;
  LONG tmExternalLeading;
  LONG tmAveCharWidth;
  LONG tmMaxCharWidth;
  LONG tmWeight;
  LONG tmOverhang;
  LONG tmDigitizedAspectX;
  LONG tmDigitizedAspectY;
  WCHAR tmFirstChar;
  WCHAR tmLastChar;
  WCHAR tmDefaultChar;
  WCHAR tmBreakChar;
  BYTE tmItalic;
  BYTE tmUnderlined;
  BYTE tmStruckOut;
  BYTE tmPitchAndFamily;
  BYTE tmCharSet;
};
#pragma pack(pop)

/* 113 */
typedef struct HACCEL__ *HACCEL;

/* 114 */
struct HACCEL__
{
  int unused;
};

/* 115 */
typedef struct tagACCEL *LPACCEL;

/* 116 */
struct tagACCEL
{
  BYTE fVirt;
  WORD key;
  WORD cmd;
};

/* 117 */
typedef HANDLE HDWP;

/* 118 */
typedef struct HRGN__ *HRGN;

/* 119 */
struct HRGN__
{
  int unused;
};

/* 121 */
typedef DWORD ACCESS_MASK;

/* 120 */
typedef ACCESS_MASK REGSAM;

/* 122 */
typedef struct _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;

/* 123 */
typedef BYTE *LPBYTE;

/* 124 */
typedef struct _BLENDFUNCTION BLENDFUNCTION;

/* 125 */
struct _BLENDFUNCTION
{
  BYTE BlendOp;
  BYTE BlendFlags;
  BYTE SourceConstantAlpha;
  BYTE AlphaFormat;
};

/* 126 */
typedef struct tagBITMAPINFO BITMAPINFO;

/* 129 */
struct tagRGBQUAD
{
  BYTE rgbBlue;
  BYTE rgbGreen;
  BYTE rgbRed;
  BYTE rgbReserved;
};

/* 128 */
typedef struct tagRGBQUAD RGBQUAD;

/* 127 */
struct tagBITMAPINFO
{
  BITMAPINFOHEADER bmiHeader;
  RGBQUAD bmiColors[1];
};

/* 130 */
typedef IStream *LPSTREAM;

/* 131 */
#pragma pack(push, 8)
struct IStream
{
  struct IStreamVtbl *lpVtbl;
};
#pragma pack(pop)

/* 133 */
typedef int HRESULT;

/* 134 */
typedef unsigned int ULONG;

/* 137 */
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
  DWORD LowPart;
  LONG HighPart;
};

/* 138 */
typedef __int64 LONGLONG;

/* 136 */
union _LARGE_INTEGER
{
  struct
  {
    DWORD LowPart;
    LONG HighPart;
  };
  struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
  LONGLONG QuadPart;
};

/* 135 */
typedef union _LARGE_INTEGER LARGE_INTEGER;

/* 139 */
typedef union _ULARGE_INTEGER ULARGE_INTEGER;

/* 141 */
struct _ULARGE_INTEGER::$0354AA9C204208F00D0965D07BBE7FAC
{
  DWORD LowPart;
  DWORD HighPart;
};

/* 142 */
typedef unsigned __int64 ULONGLONG;

/* 140 */
union _ULARGE_INTEGER
{
  struct
  {
    DWORD LowPart;
    DWORD HighPart;
  };
  struct _ULARGE_INTEGER::$0354AA9C204208F00D0965D07BBE7FAC u;
  ULONGLONG QuadPart;
};

/* 143 */
typedef struct tagSTATSTG STATSTG;

/* 132 */
#pragma pack(push, 8)
struct IStreamVtbl
{
  HRESULT (__stdcall *QueryInterface)(IStream *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IStream *This);
  ULONG (__stdcall *Release)(IStream *This);
  HRESULT (__stdcall *Read)(IStream *This, void *pv, ULONG cb, ULONG *pcbRead);
  HRESULT (__stdcall *Write)(IStream *This, const void *pv, ULONG cb, ULONG *pcbWritten);
  HRESULT (__stdcall *Seek)(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);
  HRESULT (__stdcall *SetSize)(IStream *This, ULARGE_INTEGER libNewSize);
  HRESULT (__stdcall *CopyTo)(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);
  HRESULT (__stdcall *Commit)(IStream *This, DWORD grfCommitFlags);
  HRESULT (__stdcall *Revert)(IStream *This);
  HRESULT (__stdcall *LockRegion)(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
  HRESULT (__stdcall *UnlockRegion)(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
  HRESULT (__stdcall *Stat)(IStream *This, STATSTG *pstatstg, DWORD grfStatFlag);
  HRESULT (__stdcall *Clone)(IStream *This, IStream **ppstm);
};
#pragma pack(pop)

/* 145 */
typedef OLECHAR *LPOLESTR;

/* 144 */
#pragma pack(push, 8)
struct tagSTATSTG
{
  LPOLESTR pwcsName;
  DWORD type;
  ULARGE_INTEGER cbSize;
  FILETIME mtime;
  FILETIME ctime;
  FILETIME atime;
  DWORD grfMode;
  DWORD grfLocksSupported;
  CLSID clsid;
  DWORD grfStateBits;
  DWORD reserved;
};
#pragma pack(pop)

/* 146 */
typedef struct _SYSTEMTIME *LPSYSTEMTIME;

/* 147 */
struct _SYSTEMTIME
{
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
};

/* 148 */
typedef double DOUBLE;

/* 149 */
struct tagMENUITEMINFOW
{
  UINT cbSize;
  UINT fMask;
  UINT fType;
  UINT fState;
  UINT wID;
  HMENU hSubMenu;
  HBITMAP hbmpChecked;
  HBITMAP hbmpUnchecked;
  ULONG_PTR dwItemData;
  LPWSTR dwTypeData;
  UINT cch;
  HBITMAP hbmpItem;
};

/* 150 */
typedef IDataObject *LPDATAOBJECT;

/* 151 */
#pragma pack(push, 8)
struct IDataObject
{
  struct IDataObjectVtbl *lpVtbl;
};
#pragma pack(pop)

/* 153 */
typedef struct tagFORMATETC FORMATETC;

/* 158 */
typedef struct tagSTGMEDIUM uSTGMEDIUM;

/* 157 */
typedef uSTGMEDIUM STGMEDIUM;

/* 152 */
#pragma pack(push, 8)
struct IDataObjectVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDataObject *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IDataObject *This);
  ULONG (__stdcall *Release)(IDataObject *This);
  HRESULT (__stdcall *GetData)(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium);
  HRESULT (__stdcall *GetDataHere)(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium);
  HRESULT (__stdcall *QueryGetData)(IDataObject *This, FORMATETC *pformatetc);
  HRESULT (__stdcall *GetCanonicalFormatEtc)(IDataObject *This, FORMATETC *pformatectIn, FORMATETC *pformatetcOut);
  HRESULT (__stdcall *SetData)(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);
  HRESULT (__stdcall *EnumFormatEtc)(IDataObject *This, DWORD dwDirection, IEnumFORMATETC **ppenumFormatEtc);
  HRESULT (__stdcall *DAdvise)(IDataObject *This, FORMATETC *pformatetc, DWORD advf, IAdviseSink *pAdvSink, DWORD *pdwConnection);
  HRESULT (__stdcall *DUnadvise)(IDataObject *This, DWORD dwConnection);
  HRESULT (__stdcall *EnumDAdvise)(IDataObject *This, IEnumSTATDATA **ppenumAdvise);
};
#pragma pack(pop)

/* 155 */
typedef struct tagDVTARGETDEVICE DVTARGETDEVICE;

/* 154 */
#pragma pack(push, 8)
struct tagFORMATETC
{
  CLIPFORMAT cfFormat;
  DVTARGETDEVICE *ptd;
  DWORD dwAspect;
  LONG lindex;
  DWORD tymed;
};
#pragma pack(pop)

/* 161 */
typedef void *HMETAFILEPICT;

/* 162 */
typedef struct HENHMETAFILE__ *HENHMETAFILE;

/* 160 */
#pragma pack(push, 8)
union tagSTGMEDIUM::$7B772CC839E5463FC51219F893F364BB
{
  HBITMAP hBitmap;
  HMETAFILEPICT hMetaFilePict;
  HENHMETAFILE hEnhMetaFile;
  HGLOBAL hGlobal;
  LPOLESTR lpszFileName;
  IStream *pstm;
  IStorage *pstg;
};
#pragma pack(pop)

/* 159 */
#pragma pack(push, 8)
struct tagSTGMEDIUM
{
  DWORD tymed;
  #pragma pack(push, 8)
  union
  {
    HBITMAP hBitmap;
    HMETAFILEPICT hMetaFilePict;
    HENHMETAFILE hEnhMetaFile;
    HGLOBAL hGlobal;
    LPOLESTR lpszFileName;
    IStream *pstm;
    IStorage *pstg;
  };
  #pragma pack(pop)
  IUnknown *pUnkForRelease;
};
#pragma pack(pop)

/* 171 */
#pragma pack(push, 8)
struct IEnumFORMATETC
{
  struct IEnumFORMATETCVtbl *lpVtbl;
};
#pragma pack(pop)

/* 173 */
#pragma pack(push, 8)
struct IAdviseSink
{
  struct IAdviseSinkVtbl *lpVtbl;
};
#pragma pack(pop)

/* 187 */
#pragma pack(push, 8)
struct IEnumSTATDATA
{
  struct IEnumSTATDATAVtbl *lpVtbl;
};
#pragma pack(pop)

/* 156 */
#pragma pack(push, 8)
struct tagDVTARGETDEVICE
{
  DWORD tdSize;
  WORD tdDriverNameOffset;
  WORD tdDeviceNameOffset;
  WORD tdPortNameOffset;
  WORD tdExtDevmodeOffset;
  BYTE tdData[1];
};
#pragma pack(pop)

/* 163 */
struct HENHMETAFILE__
{
  int unused;
};

/* 164 */
#pragma pack(push, 8)
struct IStorage
{
  struct IStorageVtbl *lpVtbl;
};
#pragma pack(pop)

/* 169 */
#pragma pack(push, 8)
struct IUnknown
{
  struct IUnknownVtbl *lpVtbl;
};
#pragma pack(pop)

/* 172 */
#pragma pack(push, 8)
struct IEnumFORMATETCVtbl
{
  HRESULT (__stdcall *QueryInterface)(IEnumFORMATETC *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IEnumFORMATETC *This);
  ULONG (__stdcall *Release)(IEnumFORMATETC *This);
  HRESULT (__stdcall *Next)(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);
  HRESULT (__stdcall *Skip)(IEnumFORMATETC *This, ULONG celt);
  HRESULT (__stdcall *Reset)(IEnumFORMATETC *This);
  HRESULT (__stdcall *Clone)(IEnumFORMATETC *This, IEnumFORMATETC **ppenum);
};
#pragma pack(pop)

/* 174 */
#pragma pack(push, 8)
struct IAdviseSinkVtbl
{
  HRESULT (__stdcall *QueryInterface)(IAdviseSink *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IAdviseSink *This);
  ULONG (__stdcall *Release)(IAdviseSink *This);
  void (__stdcall *OnDataChange)(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);
  void (__stdcall *OnViewChange)(IAdviseSink *This, DWORD dwAspect, LONG lindex);
  void (__stdcall *OnRename)(IAdviseSink *This, IMoniker *pmk);
  void (__stdcall *OnSave)(IAdviseSink *This);
  void (__stdcall *OnClose)(IAdviseSink *This);
};
#pragma pack(pop)

/* 189 */
typedef struct tagSTATDATA STATDATA;

/* 188 */
#pragma pack(push, 8)
struct IEnumSTATDATAVtbl
{
  HRESULT (__stdcall *QueryInterface)(IEnumSTATDATA *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IEnumSTATDATA *This);
  ULONG (__stdcall *Release)(IEnumSTATDATA *This);
  HRESULT (__stdcall *Next)(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);
  HRESULT (__stdcall *Skip)(IEnumSTATDATA *This, ULONG celt);
  HRESULT (__stdcall *Reset)(IEnumSTATDATA *This);
  HRESULT (__stdcall *Clone)(IEnumSTATDATA *This, IEnumSTATDATA **ppenum);
};
#pragma pack(pop)

/* 166 */
typedef LPOLESTR *SNB;

/* 165 */
#pragma pack(push, 8)
struct IStorageVtbl
{
  HRESULT (__stdcall *QueryInterface)(IStorage *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IStorage *This);
  ULONG (__stdcall *Release)(IStorage *This);
  HRESULT (__stdcall *CreateStream)(IStorage *This, const OLECHAR *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStream **ppstm);
  HRESULT (__stdcall *OpenStream)(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm);
  HRESULT (__stdcall *CreateStorage)(IStorage *This, const OLECHAR *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStorage **ppstg);
  HRESULT (__stdcall *OpenStorage)(IStorage *This, const OLECHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstg);
  HRESULT (__stdcall *CopyTo)(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest);
  HRESULT (__stdcall *MoveElementTo)(IStorage *This, const OLECHAR *pwcsName, IStorage *pstgDest, const OLECHAR *pwcsNewName, DWORD grfFlags);
  HRESULT (__stdcall *Commit)(IStorage *This, DWORD grfCommitFlags);
  HRESULT (__stdcall *Revert)(IStorage *This);
  HRESULT (__stdcall *EnumElements)(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum);
  HRESULT (__stdcall *DestroyElement)(IStorage *This, const OLECHAR *pwcsName);
  HRESULT (__stdcall *RenameElement)(IStorage *This, const OLECHAR *pwcsOldName, const OLECHAR *pwcsNewName);
  HRESULT (__stdcall *SetElementTimes)(IStorage *This, const OLECHAR *pwcsName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime);
  HRESULT (__stdcall *SetClass)(IStorage *This, const IID *const clsid);
  HRESULT (__stdcall *SetStateBits)(IStorage *This, DWORD grfStateBits, DWORD grfMask);
  HRESULT (__stdcall *Stat)(IStorage *This, STATSTG *pstatstg, DWORD grfStatFlag);
};
#pragma pack(pop)

/* 170 */
#pragma pack(push, 8)
struct IUnknownVtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IUnknown *This);
  ULONG (__stdcall *Release)(IUnknown *This);
};
#pragma pack(pop)

/* 175 */
#pragma pack(push, 8)
struct IMoniker
{
  struct IMonikerVtbl *lpVtbl;
};
#pragma pack(pop)

/* 190 */
#pragma pack(push, 8)
struct tagSTATDATA
{
  FORMATETC formatetc;
  DWORD advf;
  IAdviseSink *pAdvSink;
  DWORD dwConnection;
};
#pragma pack(pop)

/* 167 */
#pragma pack(push, 8)
struct IEnumSTATSTG
{
  struct IEnumSTATSTGVtbl *lpVtbl;
};
#pragma pack(pop)

/* 176 */
#pragma pack(push, 8)
struct IMonikerVtbl
{
  HRESULT (__stdcall *QueryInterface)(IMoniker *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IMoniker *This);
  ULONG (__stdcall *Release)(IMoniker *This);
  HRESULT (__stdcall *GetClassID)(IMoniker *This, CLSID *pClassID);
  HRESULT (__stdcall *IsDirty)(IMoniker *This);
  HRESULT (__stdcall *Load)(IMoniker *This, IStream *pStm);
  HRESULT (__stdcall *Save)(IMoniker *This, IStream *pStm, BOOL fClearDirty);
  HRESULT (__stdcall *GetSizeMax)(IMoniker *This, ULARGE_INTEGER *pcbSize);
  HRESULT (__stdcall *BindToObject)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult);
  HRESULT (__stdcall *BindToStorage)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj);
  HRESULT (__stdcall *Reduce)(IMoniker *This, IBindCtx *pbc, DWORD dwReduceHowFar, IMoniker **ppmkToLeft, IMoniker **ppmkReduced);
  HRESULT (__stdcall *ComposeWith)(IMoniker *This, IMoniker *pmkRight, BOOL fOnlyIfNotGeneric, IMoniker **ppmkComposite);
  HRESULT (__stdcall *Enum)(IMoniker *This, BOOL fForward, IEnumMoniker **ppenumMoniker);
  HRESULT (__stdcall *IsEqual)(IMoniker *This, IMoniker *pmkOtherMoniker);
  HRESULT (__stdcall *Hash)(IMoniker *This, DWORD *pdwHash);
  HRESULT (__stdcall *IsRunning)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IMoniker *pmkNewlyRunning);
  HRESULT (__stdcall *GetTimeOfLastChange)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, FILETIME *pFileTime);
  HRESULT (__stdcall *Inverse)(IMoniker *This, IMoniker **ppmk);
  HRESULT (__stdcall *CommonPrefixWith)(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkPrefix);
  HRESULT (__stdcall *RelativePathTo)(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkRelPath);
  HRESULT (__stdcall *GetDisplayName)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR *ppszDisplayName);
  HRESULT (__stdcall *ParseDisplayName)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);
  HRESULT (__stdcall *IsSystemMoniker)(IMoniker *This, DWORD *pdwMksys);
};
#pragma pack(pop)

/* 168 */
#pragma pack(push, 8)
struct IEnumSTATSTGVtbl
{
  HRESULT (__stdcall *QueryInterface)(IEnumSTATSTG *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IEnumSTATSTG *This);
  ULONG (__stdcall *Release)(IEnumSTATSTG *This);
  HRESULT (__stdcall *Next)(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);
  HRESULT (__stdcall *Skip)(IEnumSTATSTG *This, ULONG celt);
  HRESULT (__stdcall *Reset)(IEnumSTATSTG *This);
  HRESULT (__stdcall *Clone)(IEnumSTATSTG *This, IEnumSTATSTG **ppenum);
};
#pragma pack(pop)

/* 177 */
#pragma pack(push, 8)
struct IBindCtx
{
  struct IBindCtxVtbl *lpVtbl;
};
#pragma pack(pop)

/* 183 */
#pragma pack(push, 8)
struct IEnumMoniker
{
  struct IEnumMonikerVtbl *lpVtbl;
};
#pragma pack(pop)

/* 179 */
typedef struct tagBIND_OPTS BIND_OPTS;

/* 178 */
#pragma pack(push, 8)
struct IBindCtxVtbl
{
  HRESULT (__stdcall *QueryInterface)(IBindCtx *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IBindCtx *This);
  ULONG (__stdcall *Release)(IBindCtx *This);
  HRESULT (__stdcall *RegisterObjectBound)(IBindCtx *This, IUnknown *punk);
  HRESULT (__stdcall *RevokeObjectBound)(IBindCtx *This, IUnknown *punk);
  HRESULT (__stdcall *ReleaseBoundObjects)(IBindCtx *This);
  HRESULT (__stdcall *SetBindOptions)(IBindCtx *This, BIND_OPTS *pbindopts);
  HRESULT (__stdcall *GetBindOptions)(IBindCtx *This, BIND_OPTS *pbindopts);
  HRESULT (__stdcall *GetRunningObjectTable)(IBindCtx *This, IRunningObjectTable **pprot);
  HRESULT (__stdcall *RegisterObjectParam)(IBindCtx *This, LPOLESTR pszKey, IUnknown *punk);
  HRESULT (__stdcall *GetObjectParam)(IBindCtx *This, LPOLESTR pszKey, IUnknown **ppunk);
  HRESULT (__stdcall *EnumObjectParam)(IBindCtx *This, IEnumString **ppenum);
  HRESULT (__stdcall *RevokeObjectParam)(IBindCtx *This, LPOLESTR pszKey);
};
#pragma pack(pop)

/* 184 */
#pragma pack(push, 8)
struct IEnumMonikerVtbl
{
  HRESULT (__stdcall *QueryInterface)(IEnumMoniker *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IEnumMoniker *This);
  ULONG (__stdcall *Release)(IEnumMoniker *This);
  HRESULT (__stdcall *Next)(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);
  HRESULT (__stdcall *Skip)(IEnumMoniker *This, ULONG celt);
  HRESULT (__stdcall *Reset)(IEnumMoniker *This);
  HRESULT (__stdcall *Clone)(IEnumMoniker *This, IEnumMoniker **ppenum);
};
#pragma pack(pop)

/* 180 */
#pragma pack(push, 8)
struct tagBIND_OPTS
{
  DWORD cbStruct;
  DWORD grfFlags;
  DWORD grfMode;
  DWORD dwTickCountDeadline;
};
#pragma pack(pop)

/* 181 */
#pragma pack(push, 8)
struct IRunningObjectTable
{
  struct IRunningObjectTableVtbl *lpVtbl;
};
#pragma pack(pop)

/* 185 */
#pragma pack(push, 8)
struct IEnumString
{
  struct IEnumStringVtbl *lpVtbl;
};
#pragma pack(pop)

/* 182 */
#pragma pack(push, 8)
struct IRunningObjectTableVtbl
{
  HRESULT (__stdcall *QueryInterface)(IRunningObjectTable *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IRunningObjectTable *This);
  ULONG (__stdcall *Release)(IRunningObjectTable *This);
  HRESULT (__stdcall *Register)(IRunningObjectTable *This, DWORD grfFlags, IUnknown *punkObject, IMoniker *pmkObjectName, DWORD *pdwRegister);
  HRESULT (__stdcall *Revoke)(IRunningObjectTable *This, DWORD dwRegister);
  HRESULT (__stdcall *IsRunning)(IRunningObjectTable *This, IMoniker *pmkObjectName);
  HRESULT (__stdcall *GetObjectA)(IRunningObjectTable *This, IMoniker *pmkObjectName, IUnknown **ppunkObject);
  HRESULT (__stdcall *NoteChangeTime)(IRunningObjectTable *This, DWORD dwRegister, FILETIME *pfiletime);
  HRESULT (__stdcall *GetTimeOfLastChange)(IRunningObjectTable *This, IMoniker *pmkObjectName, FILETIME *pfiletime);
  HRESULT (__stdcall *EnumRunning)(IRunningObjectTable *This, IEnumMoniker **ppenumMoniker);
};
#pragma pack(pop)

/* 186 */
#pragma pack(push, 8)
struct IEnumStringVtbl
{
  HRESULT (__stdcall *QueryInterface)(IEnumString *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IEnumString *This);
  ULONG (__stdcall *Release)(IEnumString *This);
  HRESULT (__stdcall *Next)(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);
  HRESULT (__stdcall *Skip)(IEnumString *This, ULONG celt);
  HRESULT (__stdcall *Reset)(IEnumString *This);
  HRESULT (__stdcall *Clone)(IEnumString *This, IEnumString **ppenum);
};
#pragma pack(pop)

/* 192 */
typedef struct tagVARIANT VARIANT;

/* 191 */
typedef VARIANT VARIANTARG;

/* 196 */
typedef unsigned __int16 VARTYPE;

/* 198 */
typedef __int16 SHORT;

/* 199 */
typedef float FLOAT;

/* 200 */
typedef __int16 VARIANT_BOOL;

/* 201 */
typedef LONG SCODE;

/* 204 */
struct tagCY::$3EA7BC8C29B528C7CA1203FC489E132F
{
  ULONG Lo;
  LONG Hi;
};

/* 203 */
union tagCY
{
  struct
  {
    ULONG Lo;
    LONG Hi;
  };
  LONGLONG int64;
};

/* 202 */
typedef union tagCY CY;

/* 205 */
typedef double DATE;

/* 262 */
typedef struct tagSAFEARRAY SAFEARRAY;

/* 220 */
typedef unsigned __int16 USHORT;

/* 264 */
typedef struct tagDEC DECIMAL;

/* 270 */
#pragma pack(push, 8)
struct tagVARIANT::$::$::$E09503A454170B491AC1C4312CE36FE6::$0FDBD249F1AECD6A49409B6B82281578
{
  PVOID pvRecord;
  IRecordInfo *pRecInfo;
};
#pragma pack(pop)

/* 197 */
#pragma pack(push, 8)
union tagVARIANT::$::$65D68C826D16CA47CF95571D7BFCD657::$E09503A454170B491AC1C4312CE36FE6
{
  LONGLONG llVal;
  LONG lVal;
  BYTE bVal;
  SHORT iVal;
  FLOAT fltVal;
  DOUBLE dblVal;
  VARIANT_BOOL boolVal;
  SCODE scode;
  CY cyVal;
  DATE date;
  BSTR bstrVal;
  IUnknown *punkVal;
  IDispatch *pdispVal;
  SAFEARRAY *parray;
  BYTE *pbVal;
  SHORT *piVal;
  LONG *plVal;
  LONGLONG *pllVal;
  FLOAT *pfltVal;
  DOUBLE *pdblVal;
  VARIANT_BOOL *pboolVal;
  SCODE *pscode;
  CY *pcyVal;
  DATE *pdate;
  BSTR *pbstrVal;
  IUnknown **ppunkVal;
  IDispatch **ppdispVal;
  SAFEARRAY **pparray;
  VARIANT *pvarVal;
  PVOID byref;
  CHAR cVal;
  USHORT uiVal;
  ULONG ulVal;
  ULONGLONG ullVal;
  INT intVal;
  UINT uintVal;
  DECIMAL *pdecVal;
  CHAR *pcVal;
  USHORT *puiVal;
  ULONG *pulVal;
  ULONGLONG *pullVal;
  INT *pintVal;
  UINT *puintVal;
  #pragma pack(push, 8)
  struct
  {
    PVOID pvRecord;
    IRecordInfo *pRecInfo;
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 195 */
#pragma pack(push, 8)
struct tagVARIANT::$E93DC971A089CC95F6C875332324C1E7::$65D68C826D16CA47CF95571D7BFCD657
{
  VARTYPE vt;
  WORD wReserved1;
  WORD wReserved2;
  WORD wReserved3;
  #pragma pack(push, 8)
  union
  {
    LONGLONG llVal;
    LONG lVal;
    BYTE bVal;
    SHORT iVal;
    FLOAT fltVal;
    DOUBLE dblVal;
    VARIANT_BOOL boolVal;
    SCODE scode;
    CY cyVal;
    DATE date;
    BSTR bstrVal;
    IUnknown *punkVal;
    IDispatch *pdispVal;
    SAFEARRAY *parray;
    BYTE *pbVal;
    SHORT *piVal;
    LONG *plVal;
    LONGLONG *pllVal;
    FLOAT *pfltVal;
    DOUBLE *pdblVal;
    VARIANT_BOOL *pboolVal;
    SCODE *pscode;
    CY *pcyVal;
    DATE *pdate;
    BSTR *pbstrVal;
    IUnknown **ppunkVal;
    IDispatch **ppdispVal;
    SAFEARRAY **pparray;
    VARIANT *pvarVal;
    PVOID byref;
    CHAR cVal;
    USHORT uiVal;
    ULONG ulVal;
    ULONGLONG ullVal;
    INT intVal;
    UINT uintVal;
    DECIMAL *pdecVal;
    CHAR *pcVal;
    USHORT *puiVal;
    ULONG *pulVal;
    ULONGLONG *pullVal;
    INT *pintVal;
    UINT *puintVal;
    #pragma pack(push, 8)
    struct
    {
      PVOID pvRecord;
      IRecordInfo *pRecInfo;
    };
    #pragma pack(pop)
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 267 */
struct tagDEC::$64EC678C49E7BE49873AFBFB7A849D34::$7F8459940C2B08BD5D82B0F27239141B
{
  BYTE scale;
  BYTE sign;
};

/* 266 */
union tagDEC::$64EC678C49E7BE49873AFBFB7A849D34
{
  struct
  {
    BYTE scale;
    BYTE sign;
  };
  USHORT signscale;
};

/* 269 */
struct tagDEC::$D28E26DEC3EC762C06C2AA9D0F7AC301::$674876891A86A76F12C10005982BCA56
{
  ULONG Lo32;
  ULONG Mid32;
};

/* 268 */
union tagDEC::$D28E26DEC3EC762C06C2AA9D0F7AC301
{
  struct
  {
    ULONG Lo32;
    ULONG Mid32;
  };
  ULONGLONG Lo64;
};

/* 265 */
struct tagDEC
{
  USHORT wReserved;
  union
  {
    struct
    {
      BYTE scale;
      BYTE sign;
    };
    USHORT signscale;
  };
  ULONG Hi32;
  union
  {
    struct
    {
      ULONG Lo32;
      ULONG Mid32;
    };
    ULONGLONG Lo64;
  };
};

/* 194 */
#pragma pack(push, 8)
union tagVARIANT::$E93DC971A089CC95F6C875332324C1E7
{
  #pragma pack(push, 8)
  struct
  {
    VARTYPE vt;
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
    #pragma pack(push, 8)
    union
    {
      LONGLONG llVal;
      LONG lVal;
      BYTE bVal;
      SHORT iVal;
      FLOAT fltVal;
      DOUBLE dblVal;
      VARIANT_BOOL boolVal;
      SCODE scode;
      CY cyVal;
      DATE date;
      BSTR bstrVal;
      IUnknown *punkVal;
      IDispatch *pdispVal;
      SAFEARRAY *parray;
      BYTE *pbVal;
      SHORT *piVal;
      LONG *plVal;
      LONGLONG *pllVal;
      FLOAT *pfltVal;
      DOUBLE *pdblVal;
      VARIANT_BOOL *pboolVal;
      SCODE *pscode;
      CY *pcyVal;
      DATE *pdate;
      BSTR *pbstrVal;
      IUnknown **ppunkVal;
      IDispatch **ppdispVal;
      SAFEARRAY **pparray;
      VARIANT *pvarVal;
      PVOID byref;
      CHAR cVal;
      USHORT uiVal;
      ULONG ulVal;
      ULONGLONG ullVal;
      INT intVal;
      UINT uintVal;
      DECIMAL *pdecVal;
      CHAR *pcVal;
      USHORT *puiVal;
      ULONG *pulVal;
      ULONGLONG *pullVal;
      INT *pintVal;
      UINT *puintVal;
      #pragma pack(push, 8)
      struct
      {
        PVOID pvRecord;
        IRecordInfo *pRecInfo;
      };
      #pragma pack(pop)
    };
    #pragma pack(pop)
  };
  #pragma pack(pop)
  DECIMAL decVal;
};
#pragma pack(pop)

/* 193 */
#pragma pack(push, 8)
struct tagVARIANT
{
  #pragma pack(push, 8)
  union
  {
    #pragma pack(push, 8)
    struct
    {
      VARTYPE vt;
      WORD wReserved1;
      WORD wReserved2;
      WORD wReserved3;
      #pragma pack(push, 8)
      union
      {
        LONGLONG llVal;
        LONG lVal;
        BYTE bVal;
        SHORT iVal;
        FLOAT fltVal;
        DOUBLE dblVal;
        VARIANT_BOOL boolVal;
        SCODE scode;
        CY cyVal;
        DATE date;
        BSTR bstrVal;
        IUnknown *punkVal;
        IDispatch *pdispVal;
        SAFEARRAY *parray;
        BYTE *pbVal;
        SHORT *piVal;
        LONG *plVal;
        LONGLONG *pllVal;
        FLOAT *pfltVal;
        DOUBLE *pdblVal;
        VARIANT_BOOL *pboolVal;
        SCODE *pscode;
        CY *pcyVal;
        DATE *pdate;
        BSTR *pbstrVal;
        IUnknown **ppunkVal;
        IDispatch **ppdispVal;
        SAFEARRAY **pparray;
        VARIANT *pvarVal;
        PVOID byref;
        CHAR cVal;
        USHORT uiVal;
        ULONG ulVal;
        ULONGLONG ullVal;
        INT intVal;
        UINT uintVal;
        DECIMAL *pdecVal;
        CHAR *pcVal;
        USHORT *puiVal;
        ULONG *pulVal;
        ULONGLONG *pullVal;
        INT *pintVal;
        UINT *puintVal;
        #pragma pack(push, 8)
        struct
        {
          PVOID pvRecord;
          IRecordInfo *pRecInfo;
        };
        #pragma pack(pop)
      };
      #pragma pack(pop)
    };
    #pragma pack(pop)
    DECIMAL decVal;
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 206 */
#pragma pack(push, 8)
struct IDispatch
{
  struct IDispatchVtbl *lpVtbl;
};
#pragma pack(pop)

/* 222 */
#pragma pack(push, 8)
struct tagSAFEARRAYBOUND
{
  ULONG cElements;
  LONG lLbound;
};
#pragma pack(pop)

/* 221 */
typedef struct tagSAFEARRAYBOUND SAFEARRAYBOUND;

/* 263 */
#pragma pack(push, 8)
struct tagSAFEARRAY
{
  USHORT cDims;
  USHORT fFeatures;
  ULONG cbElements;
  ULONG cLocks;
  PVOID pvData;
  SAFEARRAYBOUND rgsabound[1];
};
#pragma pack(pop)

/* 271 */
#pragma pack(push, 8)
struct IRecordInfo
{
  struct IRecordInfoVtbl *lpVtbl;
};
#pragma pack(pop)

/* 213 */
typedef LONG DISPID;

/* 252 */
typedef struct tagDISPPARAMS DISPPARAMS;

/* 254 */
typedef struct tagEXCEPINFO EXCEPINFO;

/* 207 */
#pragma pack(push, 8)
struct IDispatchVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDispatch *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IDispatch *This);
  ULONG (__stdcall *Release)(IDispatch *This);
  HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *This, UINT *pctinfo);
  HRESULT (__stdcall *GetTypeInfo)(IDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
  HRESULT (__stdcall *GetIDsOfNames)(IDispatch *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
  HRESULT (__stdcall *Invoke)(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
};
#pragma pack(pop)

/* 272 */
#pragma pack(push, 8)
struct IRecordInfoVtbl
{
  HRESULT (__stdcall *QueryInterface)(IRecordInfo *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IRecordInfo *This);
  ULONG (__stdcall *Release)(IRecordInfo *This);
  HRESULT (__stdcall *RecordInit)(IRecordInfo *This, PVOID pvNew);
  HRESULT (__stdcall *RecordClear)(IRecordInfo *This, PVOID pvExisting);
  HRESULT (__stdcall *RecordCopy)(IRecordInfo *This, PVOID pvExisting, PVOID pvNew);
  HRESULT (__stdcall *GetGuid)(IRecordInfo *This, GUID *pguid);
  HRESULT (__stdcall *GetName)(IRecordInfo *This, BSTR *pbstrName);
  HRESULT (__stdcall *GetSize)(IRecordInfo *This, ULONG *pcbSize);
  HRESULT (__stdcall *GetTypeInfo)(IRecordInfo *This, ITypeInfo **ppTypeInfo);
  HRESULT (__stdcall *GetField)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
  HRESULT (__stdcall *GetFieldNoCopy)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField, PVOID *ppvDataCArray);
  HRESULT (__stdcall *PutField)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
  HRESULT (__stdcall *PutFieldNoCopy)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);
  HRESULT (__stdcall *GetFieldNames)(IRecordInfo *This, ULONG *pcNames, BSTR *rgBstrNames);
  BOOL (__stdcall *IsMatchingType)(IRecordInfo *This, IRecordInfo *pRecordInfo);
  PVOID (__stdcall *RecordCreate)(IRecordInfo *This);
  HRESULT (__stdcall *RecordCreateCopy)(IRecordInfo *This, PVOID pvSource, PVOID *ppvDest);
  HRESULT (__stdcall *RecordDestroy)(IRecordInfo *This, PVOID pvRecord);
};
#pragma pack(pop)

/* 208 */
#pragma pack(push, 8)
struct ITypeInfo
{
  struct ITypeInfoVtbl *lpVtbl;
};
#pragma pack(pop)

/* 253 */
#pragma pack(push, 8)
struct tagDISPPARAMS
{
  VARIANTARG *rgvarg;
  DISPID *rgdispidNamedArgs;
  UINT cArgs;
  UINT cNamedArgs;
};
#pragma pack(pop)

/* 255 */
#pragma pack(push, 8)
struct tagEXCEPINFO
{
  WORD wCode;
  WORD wReserved;
  BSTR bstrSource;
  BSTR bstrDescription;
  BSTR bstrHelpFile;
  DWORD dwHelpContext;
  PVOID pvReserved;
  HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
  SCODE scode;
};
#pragma pack(pop)

/* 210 */
typedef struct tagTYPEATTR TYPEATTR;

/* 232 */
typedef struct tagFUNCDESC FUNCDESC;

/* 247 */
typedef struct tagVARDESC VARDESC;

/* 212 */
typedef DISPID MEMBERID;

/* 223 */
typedef DWORD HREFTYPE;

/* 244 */
enum __bitmask tagINVOKEKIND
{
  INVOKE_FUNC = 0x1,
  INVOKE_PROPERTYGET = 0x2,
  INVOKE_PROPERTYPUT = 0x4,
  INVOKE_PROPERTYPUTREF = 0x8,
};

/* 243 */
typedef enum tagINVOKEKIND INVOKEKIND;

/* 209 */
#pragma pack(push, 8)
struct ITypeInfoVtbl
{
  HRESULT (__stdcall *QueryInterface)(ITypeInfo *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(ITypeInfo *This);
  ULONG (__stdcall *Release)(ITypeInfo *This);
  HRESULT (__stdcall *GetTypeAttr)(ITypeInfo *This, TYPEATTR **ppTypeAttr);
  HRESULT (__stdcall *GetTypeComp)(ITypeInfo *This, ITypeComp **ppTComp);
  HRESULT (__stdcall *GetFuncDesc)(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc);
  HRESULT (__stdcall *GetVarDesc)(ITypeInfo *This, UINT index, VARDESC **ppVarDesc);
  HRESULT (__stdcall *GetNames)(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);
  HRESULT (__stdcall *GetRefTypeOfImplType)(ITypeInfo *This, UINT index, HREFTYPE *pRefType);
  HRESULT (__stdcall *GetImplTypeFlags)(ITypeInfo *This, UINT index, INT *pImplTypeFlags);
  HRESULT (__stdcall *GetIDsOfNames)(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);
  HRESULT (__stdcall *Invoke)(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
  HRESULT (__stdcall *GetDocumentation)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
  HRESULT (__stdcall *GetDllEntry)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);
  HRESULT (__stdcall *GetRefTypeInfo)(ITypeInfo *This, HREFTYPE hRefType, ITypeInfo **ppTInfo);
  HRESULT (__stdcall *AddressOfMember)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);
  HRESULT (__stdcall *CreateInstance)(ITypeInfo *This, IUnknown *pUnkOuter, const IID *const riid, PVOID *ppvObj);
  HRESULT (__stdcall *GetMops)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrMops);
  HRESULT (__stdcall *GetContainingTypeLib)(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex);
  void (__stdcall *ReleaseTypeAttr)(ITypeInfo *This, TYPEATTR *pTypeAttr);
  void (__stdcall *ReleaseFuncDesc)(ITypeInfo *This, FUNCDESC *pFuncDesc);
  void (__stdcall *ReleaseVarDesc)(ITypeInfo *This, VARDESC *pVarDesc);
};
#pragma pack(pop)

/* 215 */
enum tagTYPEKIND
{
  TKIND_ENUM = 0x0,
  TKIND_RECORD = 0x1,
  TKIND_MODULE = 0x2,
  TKIND_INTERFACE = 0x3,
  TKIND_DISPATCH = 0x4,
  TKIND_COCLASS = 0x5,
  TKIND_ALIAS = 0x6,
  TKIND_UNION = 0x7,
  TKIND_MAX = 0x8,
};

/* 214 */
typedef enum tagTYPEKIND TYPEKIND;

/* 218 */
#pragma pack(push, 8)
union tagTYPEDESC::$AC700B6542D8071E244CADABF8A32897
{
  struct tagTYPEDESC *lptdesc;
  struct tagARRAYDESC *lpadesc;
  HREFTYPE hreftype;
};
#pragma pack(pop)

/* 217 */
#pragma pack(push, 8)
struct tagTYPEDESC
{
  #pragma pack(push, 8)
  union
  {
    struct tagTYPEDESC *lptdesc;
    struct tagARRAYDESC *lpadesc;
    HREFTYPE hreftype;
  };
  #pragma pack(pop)
  VARTYPE vt;
};
#pragma pack(pop)

/* 216 */
typedef struct tagTYPEDESC TYPEDESC;

/* 225 */
#pragma pack(push, 8)
struct tagIDLDESC
{
  ULONG_PTR dwReserved;
  USHORT wIDLFlags;
};
#pragma pack(pop)

/* 224 */
typedef struct tagIDLDESC IDLDESC;

/* 211 */
#pragma pack(push, 8)
struct tagTYPEATTR
{
  GUID guid;
  LCID lcid;
  DWORD dwReserved;
  MEMBERID memidConstructor;
  MEMBERID memidDestructor;
  LPOLESTR lpstrSchema;
  ULONG cbSizeInstance;
  TYPEKIND typekind;
  WORD cFuncs;
  WORD cVars;
  WORD cImplTypes;
  WORD cbSizeVft;
  WORD cbAlignment;
  WORD wTypeFlags;
  WORD wMajorVerNum;
  WORD wMinorVerNum;
  TYPEDESC tdescAlias;
  IDLDESC idldescType;
};
#pragma pack(pop)

/* 226 */
#pragma pack(push, 8)
struct ITypeComp
{
  struct ITypeCompVtbl *lpVtbl;
};
#pragma pack(pop)

/* 234 */
typedef struct tagELEMDESC ELEMDESC;

/* 242 */
enum tagFUNCKIND
{
  FUNC_VIRTUAL = 0x0,
  FUNC_PUREVIRTUAL = 0x1,
  FUNC_NONVIRTUAL = 0x2,
  FUNC_STATIC = 0x3,
  FUNC_DISPATCH = 0x4,
};

/* 241 */
typedef enum tagFUNCKIND FUNCKIND;

/* 246 */
enum tagCALLCONV
{
  CC_FASTCALL = 0x0,
  CC_CDECL = 0x1,
  CC_MSCPASCAL = 0x2,
  CC_PASCAL = 0x2,
  CC_MACPASCAL = 0x3,
  CC_STDCALL = 0x4,
  CC_FPFASTCALL = 0x5,
  CC_SYSCALL = 0x6,
  CC_MPWCDECL = 0x7,
  CC_MPWPASCAL = 0x8,
  CC_MAX = 0x9,
};

/* 245 */
typedef enum tagCALLCONV CALLCONV;

/* 239 */
typedef struct tagPARAMDESCEX *LPPARAMDESCEX;

/* 238 */
#pragma pack(push, 8)
struct tagPARAMDESC
{
  LPPARAMDESCEX pparamdescex;
  USHORT wParamFlags;
};
#pragma pack(pop)

/* 237 */
typedef struct tagPARAMDESC PARAMDESC;

/* 236 */
#pragma pack(push, 8)
union tagELEMDESC::$7C8F4CED1424251743D09680A1A0B07D
{
  IDLDESC idldesc;
  PARAMDESC paramdesc;
};
#pragma pack(pop)

/* 235 */
#pragma pack(push, 8)
struct tagELEMDESC
{
  TYPEDESC tdesc;
  #pragma pack(push, 8)
  union
  {
    IDLDESC idldesc;
    PARAMDESC paramdesc;
  };
  #pragma pack(pop)
};
#pragma pack(pop)

/* 233 */
#pragma pack(push, 8)
struct tagFUNCDESC
{
  MEMBERID memid;
  SCODE *lprgscode;
  ELEMDESC *lprgelemdescParam;
  FUNCKIND funckind;
  INVOKEKIND invkind;
  CALLCONV callconv;
  SHORT cParams;
  SHORT cParamsOpt;
  SHORT oVft;
  SHORT cScodes;
  ELEMDESC elemdescFunc;
  WORD wFuncFlags;
};
#pragma pack(pop)

/* 249 */
#pragma pack(push, 8)
union tagVARDESC::$E6274BD6A7149C9CC2413444FF769F0B
{
  ULONG oInst;
  VARIANT *lpvarValue;
};
#pragma pack(pop)

/* 251 */
enum tagVARKIND
{
  VAR_PERINSTANCE = 0x0,
  VAR_STATIC = 0x1,
  VAR_CONST = 0x2,
  VAR_DISPATCH = 0x3,
};

/* 250 */
typedef enum tagVARKIND VARKIND;

/* 248 */
#pragma pack(push, 8)
struct tagVARDESC
{
  MEMBERID memid;
  LPOLESTR lpstrSchema;
  #pragma pack(push, 8)
  union
  {
    ULONG oInst;
    VARIANT *lpvarValue;
  };
  #pragma pack(pop)
  ELEMDESC elemdescVar;
  WORD wVarFlags;
  VARKIND varkind;
};
#pragma pack(pop)

/* 256 */
#pragma pack(push, 8)
struct ITypeLib
{
  struct ITypeLibVtbl *lpVtbl;
};
#pragma pack(pop)

/* 219 */
#pragma pack(push, 8)
struct tagARRAYDESC
{
  TYPEDESC tdescElem;
  USHORT cDims;
  SAFEARRAYBOUND rgbounds[1];
};
#pragma pack(pop)

/* 229 */
enum tagDESCKIND
{
  DESCKIND_NONE = 0x0,
  DESCKIND_FUNCDESC = 0x1,
  DESCKIND_VARDESC = 0x2,
  DESCKIND_TYPECOMP = 0x3,
  DESCKIND_IMPLICITAPPOBJ = 0x4,
  DESCKIND_MAX = 0x5,
};

/* 228 */
typedef enum tagDESCKIND DESCKIND;

/* 230 */
typedef union tagBINDPTR BINDPTR;

/* 227 */
#pragma pack(push, 8)
struct ITypeCompVtbl
{
  HRESULT (__stdcall *QueryInterface)(ITypeComp *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(ITypeComp *This);
  ULONG (__stdcall *Release)(ITypeComp *This);
  HRESULT (__stdcall *Bind)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr);
  HRESULT (__stdcall *BindType)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp);
};
#pragma pack(pop)

/* 240 */
#pragma pack(push, 8)
struct tagPARAMDESCEX
{
  ULONG cBytes;
  VARIANTARG varDefaultValue;
};
#pragma pack(pop)

/* 258 */
typedef struct tagTLIBATTR TLIBATTR;

/* 257 */
#pragma pack(push, 8)
struct ITypeLibVtbl
{
  HRESULT (__stdcall *QueryInterface)(ITypeLib *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(ITypeLib *This);
  ULONG (__stdcall *Release)(ITypeLib *This);
  UINT (__stdcall *GetTypeInfoCount)(ITypeLib *This);
  HRESULT (__stdcall *GetTypeInfo)(ITypeLib *This, UINT index, ITypeInfo **ppTInfo);
  HRESULT (__stdcall *GetTypeInfoType)(ITypeLib *This, UINT index, TYPEKIND *pTKind);
  HRESULT (__stdcall *GetTypeInfoOfGuid)(ITypeLib *This, const GUID *const guid, ITypeInfo **ppTinfo);
  HRESULT (__stdcall *GetLibAttr)(ITypeLib *This, TLIBATTR **ppTLibAttr);
  HRESULT (__stdcall *GetTypeComp)(ITypeLib *This, ITypeComp **ppTComp);
  HRESULT (__stdcall *GetDocumentation)(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);
  HRESULT (__stdcall *IsName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);
  HRESULT (__stdcall *FindName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);
  void (__stdcall *ReleaseTLibAttr)(ITypeLib *This, TLIBATTR *pTLibAttr);
};
#pragma pack(pop)

/* 231 */
#pragma pack(push, 8)
union tagBINDPTR
{
  FUNCDESC *lpfuncdesc;
  VARDESC *lpvardesc;
  ITypeComp *lptcomp;
};
#pragma pack(pop)

/* 261 */
enum tagSYSKIND
{
  SYS_WIN16 = 0x0,
  SYS_WIN32 = 0x1,
  SYS_MAC = 0x2,
  SYS_WIN64 = 0x3,
};

/* 260 */
typedef enum tagSYSKIND SYSKIND;

/* 259 */
#pragma pack(push, 8)
struct tagTLIBATTR
{
  GUID guid;
  LCID lcid;
  SYSKIND syskind;
  WORD wMajorVerNum;
  WORD wMinorVerNum;
  WORD wLibFlags;
};
#pragma pack(pop)

/* 273 */
struct tagPALETTEENTRY
{
  BYTE peRed;
  BYTE peGreen;
  BYTE peBlue;
  BYTE peFlags;
};

/* 274 */
typedef struct _ICONINFO ICONINFO;

/* 275 */
struct _ICONINFO
{
  BOOL fIcon;
  DWORD xHotspot;
  DWORD yHotspot;
  HBITMAP hbmMask;
  HBITMAP hbmColor;
};

/* 276 */
typedef IUnknown *LPUNKNOWN;

/* 277 */
struct tagLOGFONTW
{
  LONG lfHeight;
  LONG lfWidth;
  LONG lfEscapement;
  LONG lfOrientation;
  LONG lfWeight;
  BYTE lfItalic;
  BYTE lfUnderline;
  BYTE lfStrikeOut;
  BYTE lfCharSet;
  BYTE lfOutPrecision;
  BYTE lfClipPrecision;
  BYTE lfQuality;
  BYTE lfPitchAndFamily;
  WCHAR lfFaceName[32];
};

/* 278 */
struct _STARTUPINFOW
{
  DWORD cb;
  LPWSTR lpReserved;
  LPWSTR lpDesktop;
  LPWSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  LPBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
};

/* 280 */
typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;

/* 279 */
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

/* 281 */
struct _EXCEPTION_RECORD
{
  DWORD ExceptionCode;
  DWORD ExceptionFlags;
  struct _EXCEPTION_RECORD *ExceptionRecord;
  PVOID ExceptionAddress;
  DWORD NumberParameters;
  ULONG_PTR ExceptionInformation[15];
};

/* 282 */
struct _MEMORY_BASIC_INFORMATION
{
  PVOID BaseAddress;
  PVOID AllocationBase;
  DWORD AllocationProtect;
  SIZE_T RegionSize;
  DWORD State;
  DWORD Protect;
  DWORD Type;
};

/* 285 */
struct _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F::$AA04DEB0C6383F89F13D312A174572A9
{
  WORD wProcessorArchitecture;
  WORD wReserved;
};

/* 284 */
union _SYSTEM_INFO::$A707B71C060B6D10F73A71917EA8473F
{
  DWORD dwOemId;
  struct
  {
    WORD wProcessorArchitecture;
    WORD wReserved;
  };
};

/* 286 */
typedef ULONG_PTR DWORD_PTR;

/* 283 */
struct _SYSTEM_INFO
{
  union
  {
    DWORD dwOemId;
    struct
    {
      WORD wProcessorArchitecture;
      WORD wReserved;
    };
  };
  DWORD dwPageSize;
  LPVOID lpMinimumApplicationAddress;
  LPVOID lpMaximumApplicationAddress;
  DWORD_PTR dwActiveProcessorMask;
  DWORD dwNumberOfProcessors;
  DWORD dwProcessorType;
  DWORD dwAllocationGranularity;
  WORD wProcessorLevel;
  WORD wProcessorRevision;
};

/* 287 */
struct _STARTUPINFOA
{
  DWORD cb;
  LPSTR lpReserved;
  LPSTR lpDesktop;
  LPSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  LPBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
};

/* 290 */
typedef struct _CONTEXT CONTEXT;

/* 289 */
typedef CONTEXT *PCONTEXT;

/* 288 */
struct _EXCEPTION_POINTERS
{
  PEXCEPTION_RECORD ExceptionRecord;
  PCONTEXT ContextRecord;
};

/* 293 */
struct _FLOATING_SAVE_AREA
{
  DWORD ControlWord;
  DWORD StatusWord;
  DWORD TagWord;
  DWORD ErrorOffset;
  DWORD ErrorSelector;
  DWORD DataOffset;
  DWORD DataSelector;
  BYTE RegisterArea[80];
  DWORD Spare0;
};

/* 292 */
typedef struct _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;

/* 291 */
#pragma pack(push, 4)
struct _CONTEXT
{
  DWORD ContextFlags;
  DWORD Dr0;
  DWORD Dr1;
  DWORD Dr2;
  DWORD Dr3;
  DWORD Dr6;
  DWORD Dr7;
  FLOATING_SAVE_AREA FloatSave;
  DWORD SegGs;
  DWORD SegFs;
  DWORD SegEs;
  DWORD SegDs;
  DWORD Edi;
  DWORD Esi;
  DWORD Ebx;
  DWORD Edx;
  DWORD Ecx;
  DWORD Eax;
  DWORD Ebp;
  DWORD Eip;
  DWORD SegCs;
  DWORD EFlags;
  DWORD Esp;
  DWORD SegSs;
  BYTE ExtendedRegisters[512];
};
#pragma pack(pop)

/* 294 */
struct _cpinfo
{
  UINT MaxCharSize;
  BYTE DefaultChar[2];
  BYTE LeadByte[12];
};

/* 296 */
typedef struct _SYSTEMTIME SYSTEMTIME;

/* 295 */
struct _TIME_ZONE_INFORMATION
{
  LONG Bias;
  WCHAR StandardName[32];
  SYSTEMTIME StandardDate;
  LONG StandardBias;
  WCHAR DaylightName[32];
  SYSTEMTIME DaylightDate;
  LONG DaylightBias;
};

/* 297 */
typedef WORD *LPWORD;

/* 298 */
typedef struct _devicemodeW *PDEVMODEW;

/* 301 */
struct _devicemodeW::$5A39A2C3BB0B1D2D5888DFEE2BA0B23C::$A4EE175A7532F35C00DA5CAD042934DF
{
  __int16 dmOrientation;
  __int16 dmPaperSize;
  __int16 dmPaperLength;
  __int16 dmPaperWidth;
  __int16 dmScale;
  __int16 dmCopies;
  __int16 dmDefaultSource;
  __int16 dmPrintQuality;
};

/* 304 */
struct _POINTL
{
  LONG x;
  LONG y;
};

/* 303 */
typedef struct _POINTL POINTL;

/* 302 */
struct _devicemodeW::$5A39A2C3BB0B1D2D5888DFEE2BA0B23C::$604F2BC6924E02F5722A52FC79BC44F9
{
  POINTL dmPosition;
  DWORD dmDisplayOrientation;
  DWORD dmDisplayFixedOutput;
};

/* 300 */
union _devicemodeW::$5A39A2C3BB0B1D2D5888DFEE2BA0B23C
{
  struct
  {
    __int16 dmOrientation;
    __int16 dmPaperSize;
    __int16 dmPaperLength;
    __int16 dmPaperWidth;
    __int16 dmScale;
    __int16 dmCopies;
    __int16 dmDefaultSource;
    __int16 dmPrintQuality;
  };
  struct
  {
    POINTL dmPosition;
    DWORD dmDisplayOrientation;
    DWORD dmDisplayFixedOutput;
  };
};

/* 305 */
union _devicemodeW::$4FBEBCCE69364E072421C9DF045BB77C
{
  DWORD dmDisplayFlags;
  DWORD dmNup;
};

/* 299 */
struct _devicemodeW
{
  WCHAR dmDeviceName[32];
  WORD dmSpecVersion;
  WORD dmDriverVersion;
  WORD dmSize;
  WORD dmDriverExtra;
  DWORD dmFields;
  union
  {
    struct
    {
      __int16 dmOrientation;
      __int16 dmPaperSize;
      __int16 dmPaperLength;
      __int16 dmPaperWidth;
      __int16 dmScale;
      __int16 dmCopies;
      __int16 dmDefaultSource;
      __int16 dmPrintQuality;
    };
    struct
    {
      POINTL dmPosition;
      DWORD dmDisplayOrientation;
      DWORD dmDisplayFixedOutput;
    };
  };
  __int16 dmColor;
  __int16 dmDuplex;
  __int16 dmYResolution;
  __int16 dmTTOption;
  __int16 dmCollate;
  WCHAR dmFormName[32];
  WORD dmLogPixels;
  DWORD dmBitsPerPel;
  DWORD dmPelsWidth;
  DWORD dmPelsHeight;
  union
  {
    DWORD dmDisplayFlags;
    DWORD dmNup;
  };
  DWORD dmDisplayFrequency;
  DWORD dmICMMethod;
  DWORD dmICMIntent;
  DWORD dmMediaType;
  DWORD dmDitherType;
  DWORD dmReserved1;
  DWORD dmReserved2;
  DWORD dmPanningWidth;
  DWORD dmPanningHeight;
};

/* 306 */
typedef HANDLE *LPHANDLE;

/* 307 */
typedef struct _PRINTER_DEFAULTSW *LPPRINTER_DEFAULTSW;

/* 309 */
typedef struct _devicemodeW *LPDEVMODEW;

/* 308 */
struct _PRINTER_DEFAULTSW
{
  LPWSTR pDatatype;
  LPDEVMODEW pDevMode;
  ACCESS_MASK DesiredAccess;
};

/* 310 */
typedef struct tagOLEUIBUSYW *LPOLEUIBUSYW;

/* 312 */
typedef UINT (__stdcall *LPFNOLEUIHOOK)(HWND, UINT, WPARAM, LPARAM);

/* 313 */
typedef struct HTASK__ *HTASK;

/* 311 */
#pragma pack(push, 8)
struct tagOLEUIBUSYW
{
  DWORD cbStruct;
  DWORD dwFlags;
  HWND hWndOwner;
  LPCWSTR lpszCaption;
  LPFNOLEUIHOOK lpfnHook;
  LPARAM lCustData;
  HINSTANCE hInstance;
  LPCWSTR lpszTemplate;
  HRSRC hResource;
  HTASK hTask;
  HWND *lphWndDialog;
};
#pragma pack(pop)

/* 314 */
struct HTASK__
{
  int unused;
};

/* 315 */
typedef struct HIMC__ *HIMC;

/* 316 */
struct HIMC__
{
  int unused;
};

/* 317 */
typedef int (__cdecl *_onexit_t)();

/* 319 */
typedef unsigned int size_t;

/* 318 */
typedef size_t rsize_t;

/* 320 */
typedef void (__cdecl *_beginthread_proc_type)(void *);

/* 321 */
typedef __crt_locale_pointers *_locale_t;

/* 322 */
#pragma pack(push, 8)
struct __crt_locale_pointers
{
  struct __crt_locale_data *locinfo;
  struct __crt_multibyte_data *mbcinfo;
};
#pragma pack(pop)

/* 323 */
typedef char *va_list;

/* 324 */
struct FuncInfo
{
  unsigned __int32 magicNumber : 29;
  unsigned __int32 bbtFlags : 3;
  int maxState __dec;
  void *pUnwindMap;
  int nTryBlocks __dec;
  void *pTryBlockMap;
  int nIPMapEntries __dec;
  void *pIPtoStateMap;
  void *pESTypeList;
  int EHFlags __hex;
};

/* 325 */
struct UnwindMapEntry
{
  int toState __dec;
  void *action;
};

/* 326 */
struct TryBlockMapEntry
{
  int tryLow __dec;
  int tryHigh __dec;
  int catchHigh __dec;
  int nCatches __dec;
  void *pHandlerArray;
};

/* 327 */
struct HandlerType
{
  int adjectives __hex;
  void *pType;
  int dispCatchObj __dec;
  void *addressOfHandler;
};

/* 328 */
struct TypeDescriptor
{
  void *pVFTable;
  void *spare;
  char name[] __strlit(C,"windows-1252");
};

/* 330 */
typedef const struct _s_ThrowInfo ThrowInfo;

/* 329 */
typedef ThrowInfo _ThrowInfo;

/* 332 */
typedef void (__cdecl *PMFN)(void *);

/* 333 */
typedef const struct _s_CatchableTypeArray CatchableTypeArray;

/* 331 */
#pragma pack(push, 4)
struct _s_ThrowInfo
{
  unsigned int attributes;
  PMFN pmfnUnwind;
  int (__cdecl *pForwardCompat)();
  CatchableTypeArray *pCatchableTypeArray;
};
#pragma pack(pop)

/* 335 */
typedef const struct _s_CatchableType CatchableType;

/* 334 */
#pragma pack(push, 4)
struct _s_CatchableTypeArray
{
  int nCatchableTypes;
  CatchableType *arrayOfCatchableTypes[];
};
#pragma pack(pop)

/* 337 */
#pragma pack(push, 4)
struct PMD
{
  int mdisp;
  int pdisp;
  int vdisp;
};
#pragma pack(pop)

/* 336 */
#pragma pack(push, 4)
struct _s_CatchableType
{
  unsigned int properties;
  TypeDescriptor *pType;
  PMD thisDisplacement;
  int sizeOrOffset;
  PMFN copyFunction;
};
#pragma pack(pop)

/* 338 */
typedef unsigned __int16 wint_t;

/* 339 */
#pragma pack(push, 8)
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};
#pragma pack(pop)

/* 340 */
typedef __int64 __time64_t;

/* 341 */
typedef unsigned int uintptr_t;

/* 342 */
typedef struct _iobuf FILE;

/* 343 */
struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
};

/* 344 */
typedef unsigned __int16 wctype_t;

/* 345 */
typedef const RECT *LPCRECT;

/* 346 */
typedef struct HMONITOR__ *HMONITOR;

/* 347 */
struct HMONITOR__
{
  int unused;
};

/* 348 */
typedef struct tagMONITORINFO *LPMONITORINFO;

/* 349 */
struct tagMONITORINFO
{
  DWORD cbSize;
  RECT rcMonitor;
  RECT rcWork;
  DWORD dwFlags;
};

/* 350 */
typedef BOOL (__stdcall *MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

/* 351 */
typedef struct tagDRAWTEXTPARAMS *LPDRAWTEXTPARAMS;

/* 352 */
struct tagDRAWTEXTPARAMS
{
  UINT cbSize;
  int iTabLength;
  int iLeftMargin;
  int iRightMargin;
  UINT uiLengthDrawn;
};

/* 353 */
typedef BOOL (__stdcall *GRAYSTRINGPROC)(HDC, LPARAM, int);

/* 354 */
typedef struct tagSIZE *LPSIZE;

/* 357 */
typedef struct _ITEMIDLIST ITEMIDLIST;

/* 356 */
typedef const ITEMIDLIST *LPCITEMIDLIST;

/* 361 */
typedef int (__stdcall *BFFCALLBACK)(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData);

/* 355 */
#pragma pack(push, 8)
struct _browseinfoW
{
  HWND hwndOwner;
  LPCITEMIDLIST pidlRoot;
  LPWSTR pszDisplayName;
  LPCWSTR lpszTitle;
  UINT ulFlags;
  BFFCALLBACK lpfn;
  LPARAM lParam;
  int iImage;
};
#pragma pack(pop)

/* 360 */
#pragma pack(push, 1)
struct _SHITEMID
{
  USHORT cb;
  BYTE abID[1];
};
#pragma pack(pop)

/* 359 */
typedef struct _SHITEMID SHITEMID;

/* 358 */
#pragma pack(push, 1)
struct _ITEMIDLIST
{
  SHITEMID mkid;
};
#pragma pack(pop)

/* 362 */
#pragma pack(push, 8)
struct tagFONTDESC
{
  UINT cbSizeofstruct;
  LPOLESTR lpstrName;
  CY cySize;
  SHORT sWeight;
  SHORT sCharset;
  BOOL fItalic;
  BOOL fUnderline;
  BOOL fStrikethrough;
};
#pragma pack(pop)

/* 363 */
typedef ILockBytes *LPLOCKBYTES;

/* 364 */
#pragma pack(push, 8)
struct ILockBytes
{
  struct ILockBytesVtbl *lpVtbl;
};
#pragma pack(pop)

/* 365 */
#pragma pack(push, 8)
struct ILockBytesVtbl
{
  HRESULT (__stdcall *QueryInterface)(ILockBytes *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(ILockBytes *This);
  ULONG (__stdcall *Release)(ILockBytes *This);
  HRESULT (__stdcall *ReadAt)(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead);
  HRESULT (__stdcall *WriteAt)(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten);
  HRESULT (__stdcall *Flush)(ILockBytes *This);
  HRESULT (__stdcall *SetSize)(ILockBytes *This, ULARGE_INTEGER cb);
  HRESULT (__stdcall *LockRegion)(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
  HRESULT (__stdcall *UnlockRegion)(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);
  HRESULT (__stdcall *Stat)(ILockBytes *This, STATSTG *pstatstg, DWORD grfStatFlag);
};
#pragma pack(pop)

/* 366 */
typedef struct HDROP__ *HDROP;

/* 367 */
#pragma pack(push, 1)
struct HDROP__
{
  int unused;
};
#pragma pack(pop)

/* 368 */
typedef unsigned int *PUINT_PTR;

/* 369 */
typedef struct tagMENUITEMINFOW MENUITEMINFOW;

/* 370 */
#pragma pack(push, 8)
struct tagOIFI
{
  UINT cb;
  BOOL fMDIApp;
  HWND hwndFrame;
  HACCEL haccel;
  UINT cAccelEntries;
};
#pragma pack(pop)

/* 371 */
typedef struct tagINITCOMMONCONTROLSEX INITCOMMONCONTROLSEX;

/* 372 */
struct tagINITCOMMONCONTROLSEX
{
  DWORD dwSize;
  DWORD dwICC;
};

/* 373 */
typedef struct _SHELLEXECUTEINFOW SHELLEXECUTEINFOW;

/* 375 */
#pragma pack(push, 1)
union _SHELLEXECUTEINFOW::$D915D6B2B775D926C11EEA321E8940B4
{
  HANDLE hIcon;
  HANDLE hMonitor;
};
#pragma pack(pop)

/* 374 */
#pragma pack(push, 1)
struct _SHELLEXECUTEINFOW
{
  DWORD cbSize;
  ULONG fMask;
  HWND hwnd;
  LPCWSTR lpVerb;
  LPCWSTR lpFile;
  LPCWSTR lpParameters;
  LPCWSTR lpDirectory;
  int nShow;
  HINSTANCE hInstApp;
  void *lpIDList;
  LPCWSTR lpClass;
  HKEY hkeyClass;
  DWORD dwHotKey;
  #pragma pack(push, 1)
  union
  {
    HANDLE hIcon;
    HANDLE hMonitor;
  };
  #pragma pack(pop)
  HANDLE hProcess;
};
#pragma pack(pop)

/* 376 */
typedef struct tagSIZE SIZE;

/* 377 */
typedef struct _SHFILEINFOW SHFILEINFOW;

/* 378 */
#pragma pack(push, 1)
struct _SHFILEINFOW
{
  HICON hIcon;
  int iIcon;
  DWORD dwAttributes;
  WCHAR szDisplayName[260];
  WCHAR szTypeName[80];
};
#pragma pack(pop)

/* 379 */
struct CActivationContext;

/* 380 */
struct CWinApp;

/* 381 */
struct CCommandLineInfo;

/* 382 */
struct CSettingsStoreSP;

/* 383 */
struct CWinAppEx;

/* 384 */
struct COccManager;

/* 385 */
struct CControlSiteFactoryMgr;

/* 386 */
struct ATL::CRegKey;

/* 387 */
struct CDialog;

/* 388 */
struct CPropertyPage;

/* 389 */
struct CListCtrl;

/* 390 */
struct CTabCtrl;

/* 391 */
struct CDC;

/* 392 */
struct CWnd;

/* 393 */
struct CListBox;

/* 394 */
struct CMFCRibbonCommandsListBox;

/* 396 */
typedef unsigned int *PUINT;

/* 395 */
struct tagLVITEMW
{
  UINT mask;
  int iItem;
  int iSubItem;
  UINT state;
  UINT stateMask;
  LPWSTR pszText;
  int cchTextMax;
  int iImage;
  LPARAM lParam;
  int iIndent;
  int iGroupId;
  UINT cColumns;
  PUINT puColumns;
  int *piColFmt;
  int iGroup;
};

/* 397 */
struct tagLVCOLUMNW
{
  UINT mask;
  int fmt;
  int cx;
  LPWSTR pszText;
  int cchTextMax;
  int iSubItem;
  int iImage;
  int iOrder;
  int cxMin;
  int cxDefault;
  int cxIdeal;
};

/* 398 */
struct CDllIsolationWrapperBase;

/* 399 */
struct CComboBox;

/* 400 */
struct CCmdTarget;

/* 401 */
struct CCmdUI;

/* 402 */
struct CMenu;

/* 403 */
struct CWinThread;

/* 404 */
struct CRect;

/* 405 */
struct CWnd::XAccessible;

/* 406 */
struct CWnd::XAccessibleServer;

/* 407 */
struct CFrameWnd;

/* 408 */
struct CScrollBar;

/* 409 */
struct ATL::CAccessibleProxy;

/* 410 */
struct COleControlSiteOrWnd;

/* 412 */
typedef WORD LANGID;

/* 411 */
struct tagACTCTXW
{
  ULONG cbSize;
  DWORD dwFlags;
  LPCWSTR lpSource;
  USHORT wProcessorArchitecture;
  LANGID wLangId;
  LPCWSTR lpAssemblyDirectory;
  LPCWSTR lpResourceName;
  LPCWSTR lpApplicationName;
  HMODULE hModule;
};

/* 413 */
struct CTypeLibCache;

/* 414 */
struct _AFX_THREAD_STATE;

/* 415 */
struct AFX_MODULE_THREAD_STATE;

/* 416 */
struct CAfxStringMgr;

/* 417 */
struct std::_Timevec;

/* 418 */
struct CException;

/* 419 */
struct CMFCAutoHideButton;

/* 420 */
struct Concurrency::details::TaskStack;

/* 421 */
struct CFileException;

/* 422 */
struct CRuntimeClass;

/* 423 */
struct CObject;

/* 424 */
struct CThreadSlotData;

/* 425 */
struct CThreadLocalObject;

/* 426 */
struct CProcessLocalObject;

/* 427 */
struct CSimpleList;

/* 428 */
struct CGdiObject;

/* 429 */
struct CShellManager;

/* 430 */
struct CMFCToolTipInfo;

/* 431 */
struct CToolTipCtrl;

/* 432 */
struct type_info;

/* 433 */
struct CMDIFrameWndEx;

/* 434 */
struct CDockState;

/* 435 */
struct CFrameImpl;

/* 436 */
struct CUserToolsManager;

/* 437 */
struct CMFCToolBarButton;

/* 438 */
struct Concurrency::details::ContextBase;

/* 439 */
struct CMFCToolBarInfo;

/* 440 */
struct CReBarCtrl;

/* 441 */
struct tagREBARBANDINFOW
{
  UINT cbSize;
  UINT fMask;
  UINT fStyle;
  COLORREF clrFore;
  COLORREF clrBack;
  LPWSTR lpText;
  UINT cch;
  int iImage;
  HWND hwndChild;
  UINT cxMinChild;
  UINT cyMinChild;
  UINT cx;
  HBITMAP hbmBack;
  UINT wID;
  UINT cyChild;
  UINT cyMaxChild;
  UINT cyIntegral;
  UINT cxIdeal;
  LPARAM lParam;
  UINT cxHeader;
  RECT rcChevronLocation;
  UINT uChevronState;
};

/* 442 */
struct Concurrency::details::VirtualProcessor;

/* 443 */
struct COleControl;

/* 444 */
struct CPane;

/* 445 */
struct CDockingManager;

/* 446 */
struct CCommandManager;

/* 447 */
struct CSettingsStore;

/* 448 */
struct ATL::CImage::CInitGDIPlus;

/* 449 */
struct ATL::CImage::CDCCache;

/* 450 */
struct CMFCToolBarImages;

/* 451 */
struct CRgn;

/* 452 */
struct CArchiveException;

/* 453 */
struct CArchive;

/* 454 */
struct CPlex;

/* 455 */
struct Concurrency::details::LockQueueNode;

/* 456 */
struct COleControlContainer;

/* 457 */
struct COleControlContainer::XOleIPFrame;

/* 458 */
struct CControlCreationInfo;

/* 459 */
struct COleControlContainer::XOleContainer;

/* 460 */
struct ATL::CAccessorBase;

/* 461 */
struct ATL::CDynamicAccessor;

/* 462 */
struct ATL::CManualAccessor;

/* 463 */
struct COleControlSite;

/* 476 */
typedef SIZE SIZEL;

/* 477 */
typedef struct tagLOGPALETTE LOGPALETTE;

/* 464 */
#pragma pack(push, 8)
struct IOleObjectVtbl
{
  HRESULT (__stdcall *QueryInterface)(IOleObject *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IOleObject *This);
  ULONG (__stdcall *Release)(IOleObject *This);
  HRESULT (__stdcall *SetClientSite)(IOleObject *This, IOleClientSite *pClientSite);
  HRESULT (__stdcall *GetClientSite)(IOleObject *This, IOleClientSite **ppClientSite);
  HRESULT (__stdcall *SetHostNames)(IOleObject *This, LPCOLESTR szContainerApp, LPCOLESTR szContainerObj);
  HRESULT (__stdcall *Close)(IOleObject *This, DWORD dwSaveOption);
  HRESULT (__stdcall *SetMoniker)(IOleObject *This, DWORD dwWhichMoniker, IMoniker *pmk);
  HRESULT (__stdcall *GetMoniker)(IOleObject *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);
  HRESULT (__stdcall *InitFromData)(IOleObject *This, IDataObject *pDataObject, BOOL fCreation, DWORD dwReserved);
  HRESULT (__stdcall *GetClipboardData)(IOleObject *This, DWORD dwReserved, IDataObject **ppDataObject);
  HRESULT (__stdcall *DoVerb)(IOleObject *This, LONG iVerb, LPMSG lpmsg, IOleClientSite *pActiveSite, LONG lindex, HWND hwndParent, LPCRECT lprcPosRect);
  HRESULT (__stdcall *EnumVerbs)(IOleObject *This, IEnumOLEVERB **ppEnumOleVerb);
  HRESULT (__stdcall *Update)(IOleObject *This);
  HRESULT (__stdcall *IsUpToDate)(IOleObject *This);
  HRESULT (__stdcall *GetUserClassID)(IOleObject *This, CLSID *pClsid);
  HRESULT (__stdcall *GetUserType)(IOleObject *This, DWORD dwFormOfType, LPOLESTR *pszUserType);
  HRESULT (__stdcall *SetExtent)(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel);
  HRESULT (__stdcall *GetExtent)(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel);
  HRESULT (__stdcall *Advise)(IOleObject *This, IAdviseSink *pAdvSink, DWORD *pdwConnection);
  HRESULT (__stdcall *Unadvise)(IOleObject *This, DWORD dwConnection);
  HRESULT (__stdcall *EnumAdvise)(IOleObject *This, IEnumSTATDATA **ppenumAdvise);
  HRESULT (__stdcall *GetMiscStatus)(IOleObject *This, DWORD dwAspect, DWORD *pdwStatus);
  HRESULT (__stdcall *SetColorScheme)(IOleObject *This, LOGPALETTE *pLogpal);
};
#pragma pack(pop)

/* 465 */
#pragma pack(push, 8)
struct IOleObject
{
  struct IOleObjectVtbl *lpVtbl;
};
#pragma pack(pop)

/* 466 */
#pragma pack(push, 8)
struct IOleClientSite
{
  struct IOleClientSiteVtbl *lpVtbl;
};
#pragma pack(pop)

/* 472 */
#pragma pack(push, 8)
struct IEnumOLEVERB
{
  struct IEnumOLEVERBVtbl *lpVtbl;
};
#pragma pack(pop)

/* 479 */
typedef struct tagPALETTEENTRY PALETTEENTRY;

/* 478 */
struct tagLOGPALETTE
{
  WORD palVersion;
  WORD palNumEntries;
  PALETTEENTRY palPalEntry[1];
};

/* 467 */
#pragma pack(push, 8)
struct IOleClientSiteVtbl
{
  HRESULT (__stdcall *QueryInterface)(IOleClientSite *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IOleClientSite *This);
  ULONG (__stdcall *Release)(IOleClientSite *This);
  HRESULT (__stdcall *SaveObject)(IOleClientSite *This);
  HRESULT (__stdcall *GetMoniker)(IOleClientSite *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);
  HRESULT (__stdcall *GetContainer)(IOleClientSite *This, IOleContainer **ppContainer);
  HRESULT (__stdcall *ShowObject)(IOleClientSite *This);
  HRESULT (__stdcall *OnShowWindow)(IOleClientSite *This, BOOL fShow);
  HRESULT (__stdcall *RequestNewObjectLayout)(IOleClientSite *This);
};
#pragma pack(pop)

/* 474 */
typedef struct tagOLEVERB *LPOLEVERB;

/* 473 */
#pragma pack(push, 8)
struct IEnumOLEVERBVtbl
{
  HRESULT (__stdcall *QueryInterface)(IEnumOLEVERB *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IEnumOLEVERB *This);
  ULONG (__stdcall *Release)(IEnumOLEVERB *This);
  HRESULT (__stdcall *Next)(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);
  HRESULT (__stdcall *Skip)(IEnumOLEVERB *This, ULONG celt);
  HRESULT (__stdcall *Reset)(IEnumOLEVERB *This);
  HRESULT (__stdcall *Clone)(IEnumOLEVERB *This, IEnumOLEVERB **ppenum);
};
#pragma pack(pop)

/* 468 */
#pragma pack(push, 8)
struct IOleContainer
{
  struct IOleContainerVtbl *lpVtbl;
};
#pragma pack(pop)

/* 475 */
#pragma pack(push, 8)
struct tagOLEVERB
{
  LONG lVerb;
  LPOLESTR lpszVerbName;
  DWORD fuFlags;
  DWORD grfAttribs;
};
#pragma pack(pop)

/* 469 */
#pragma pack(push, 8)
struct IOleContainerVtbl
{
  HRESULT (__stdcall *QueryInterface)(IOleContainer *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IOleContainer *This);
  ULONG (__stdcall *Release)(IOleContainer *This);
  HRESULT (__stdcall *ParseDisplayName)(IOleContainer *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);
  HRESULT (__stdcall *EnumObjects)(IOleContainer *This, DWORD grfFlags, IEnumUnknown **ppenum);
  HRESULT (__stdcall *LockContainer)(IOleContainer *This, BOOL fLock);
};
#pragma pack(pop)

/* 470 */
#pragma pack(push, 8)
struct IEnumUnknown
{
  struct IEnumUnknownVtbl *lpVtbl;
};
#pragma pack(pop)

/* 471 */
#pragma pack(push, 8)
struct IEnumUnknownVtbl
{
  HRESULT (__stdcall *QueryInterface)(IEnumUnknown *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IEnumUnknown *This);
  ULONG (__stdcall *Release)(IEnumUnknown *This);
  HRESULT (__stdcall *Next)(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);
  HRESULT (__stdcall *Skip)(IEnumUnknown *This, ULONG celt);
  HRESULT (__stdcall *Reset)(IEnumUnknown *This);
  HRESULT (__stdcall *Clone)(IEnumUnknown *This, IEnumUnknown **ppenum);
};
#pragma pack(pop)

/* 480 */
struct IPropertyNotifySinkVtbl
{
  HRESULT (__stdcall *QueryInterface)(IPropertyNotifySink *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IPropertyNotifySink *This);
  ULONG (__stdcall *Release)(IPropertyNotifySink *This);
  HRESULT (__stdcall *OnChanged)(IPropertyNotifySink *This, DISPID dispID);
  HRESULT (__stdcall *OnRequestEdit)(IPropertyNotifySink *This, DISPID dispID);
};

/* 481 */
struct IPropertyNotifySink
{
  struct IPropertyNotifySinkVtbl *lpVtbl;
};

/* 482 */
struct COleControlSite::XOleIPSite;

/* 483 */
struct COleControlSite::XOleControlSite;

/* 484 */
struct COleControlSite::XEventSink;

/* 485 */
struct CDataSourceControl;

/* 486 */
struct CDataBoundProperty;

/* 487 */
struct AFX_EVENT;

/* 488 */
struct COleControlSite::XOleClientSite;

/* 489 */
struct COleControlSite::XAmbientProps;

/* 490 */
struct CMemFile;

/* 491 */
struct Concurrency::details::UMSFreeVirtualProcessorRoot::InitialThreadParam;

/* 492 */
struct CMapPtrToPtr;

/* 493 */
struct CArchiveStream;

/* 494 */
struct AUX_DATA;

/* 495 */
#pragma pack(push, 8)
struct IOleInPlaceObjectVtbl
{
  HRESULT (__stdcall *QueryInterface)(IOleInPlaceObject *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IOleInPlaceObject *This);
  ULONG (__stdcall *Release)(IOleInPlaceObject *This);
  HRESULT (__stdcall *GetWindow)(IOleInPlaceObject *This, HWND *phwnd);
  HRESULT (__stdcall *ContextSensitiveHelp)(IOleInPlaceObject *This, BOOL fEnterMode);
  HRESULT (__stdcall *InPlaceDeactivate)(IOleInPlaceObject *This);
  HRESULT (__stdcall *UIDeactivate)(IOleInPlaceObject *This);
  HRESULT (__stdcall *SetObjectRects)(IOleInPlaceObject *This, LPCRECT lprcPosRect, LPCRECT lprcClipRect);
  HRESULT (__stdcall *ReactivateAndUndo)(IOleInPlaceObject *This);
};
#pragma pack(pop)

/* 496 */
#pragma pack(push, 8)
struct IOleInPlaceObject
{
  struct IOleInPlaceObjectVtbl *lpVtbl;
};
#pragma pack(pop)

/* 509 */
typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;

/* 497 */
#pragma pack(push, 8)
struct IOleInPlaceSiteVtbl
{
  HRESULT (__stdcall *QueryInterface)(IOleInPlaceSite *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IOleInPlaceSite *This);
  ULONG (__stdcall *Release)(IOleInPlaceSite *This);
  HRESULT (__stdcall *GetWindow)(IOleInPlaceSite *This, HWND *phwnd);
  HRESULT (__stdcall *ContextSensitiveHelp)(IOleInPlaceSite *This, BOOL fEnterMode);
  HRESULT (__stdcall *CanInPlaceActivate)(IOleInPlaceSite *This);
  HRESULT (__stdcall *OnInPlaceActivate)(IOleInPlaceSite *This);
  HRESULT (__stdcall *OnUIActivate)(IOleInPlaceSite *This);
  HRESULT (__stdcall *GetWindowContext)(IOleInPlaceSite *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);
  HRESULT (__stdcall *Scroll)(IOleInPlaceSite *This, SIZE scrollExtant);
  HRESULT (__stdcall *OnUIDeactivate)(IOleInPlaceSite *This, BOOL fUndoable);
  HRESULT (__stdcall *OnInPlaceDeactivate)(IOleInPlaceSite *This);
  HRESULT (__stdcall *DiscardUndoState)(IOleInPlaceSite *This);
  HRESULT (__stdcall *DeactivateAndUndo)(IOleInPlaceSite *This);
  HRESULT (__stdcall *OnPosRectChange)(IOleInPlaceSite *This, LPCRECT lprcPosRect);
};
#pragma pack(pop)

/* 498 */
#pragma pack(push, 8)
struct IOleInPlaceSite
{
  struct IOleInPlaceSiteVtbl *lpVtbl;
};
#pragma pack(pop)

/* 499 */
#pragma pack(push, 8)
struct IOleInPlaceFrame
{
  struct IOleInPlaceFrameVtbl *lpVtbl;
};
#pragma pack(pop)

/* 504 */
#pragma pack(push, 8)
struct IOleInPlaceUIWindow
{
  struct IOleInPlaceUIWindowVtbl *lpVtbl;
};
#pragma pack(pop)

/* 501 */
typedef LPCRECT LPCBORDERWIDTHS;

/* 506 */
typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

/* 508 */
typedef HGLOBAL HOLEMENU;

/* 500 */
#pragma pack(push, 8)
struct IOleInPlaceFrameVtbl
{
  HRESULT (__stdcall *QueryInterface)(IOleInPlaceFrame *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IOleInPlaceFrame *This);
  ULONG (__stdcall *Release)(IOleInPlaceFrame *This);
  HRESULT (__stdcall *GetWindow)(IOleInPlaceFrame *This, HWND *phwnd);
  HRESULT (__stdcall *ContextSensitiveHelp)(IOleInPlaceFrame *This, BOOL fEnterMode);
  HRESULT (__stdcall *GetBorder)(IOleInPlaceFrame *This, LPRECT lprectBorder);
  HRESULT (__stdcall *RequestBorderSpace)(IOleInPlaceFrame *This, LPCBORDERWIDTHS pborderwidths);
  HRESULT (__stdcall *SetBorderSpace)(IOleInPlaceFrame *This, LPCBORDERWIDTHS pborderwidths);
  HRESULT (__stdcall *SetActiveObject)(IOleInPlaceFrame *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);
  HRESULT (__stdcall *InsertMenus)(IOleInPlaceFrame *This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths);
  HRESULT (__stdcall *SetMenu)(IOleInPlaceFrame *This, HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject);
  HRESULT (__stdcall *RemoveMenus)(IOleInPlaceFrame *This, HMENU hmenuShared);
  HRESULT (__stdcall *SetStatusText)(IOleInPlaceFrame *This, LPCOLESTR pszStatusText);
  HRESULT (__stdcall *EnableModeless)(IOleInPlaceFrame *This, BOOL fEnable);
  HRESULT (__stdcall *TranslateAcceleratorA)(IOleInPlaceFrame *This, LPMSG lpmsg, WORD wID);
};
#pragma pack(pop)

/* 505 */
#pragma pack(push, 8)
struct IOleInPlaceUIWindowVtbl
{
  HRESULT (__stdcall *QueryInterface)(IOleInPlaceUIWindow *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IOleInPlaceUIWindow *This);
  ULONG (__stdcall *Release)(IOleInPlaceUIWindow *This);
  HRESULT (__stdcall *GetWindow)(IOleInPlaceUIWindow *This, HWND *phwnd);
  HRESULT (__stdcall *ContextSensitiveHelp)(IOleInPlaceUIWindow *This, BOOL fEnterMode);
  HRESULT (__stdcall *GetBorder)(IOleInPlaceUIWindow *This, LPRECT lprectBorder);
  HRESULT (__stdcall *RequestBorderSpace)(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths);
  HRESULT (__stdcall *SetBorderSpace)(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths);
  HRESULT (__stdcall *SetActiveObject)(IOleInPlaceUIWindow *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);
};
#pragma pack(pop)

/* 502 */
#pragma pack(push, 8)
struct IOleInPlaceActiveObject
{
  struct IOleInPlaceActiveObjectVtbl *lpVtbl;
};
#pragma pack(pop)

/* 507 */
#pragma pack(push, 8)
struct tagOleMenuGroupWidths
{
  LONG width[6];
};
#pragma pack(pop)

/* 503 */
#pragma pack(push, 8)
struct IOleInPlaceActiveObjectVtbl
{
  HRESULT (__stdcall *QueryInterface)(IOleInPlaceActiveObject *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IOleInPlaceActiveObject *This);
  ULONG (__stdcall *Release)(IOleInPlaceActiveObject *This);
  HRESULT (__stdcall *GetWindow)(IOleInPlaceActiveObject *This, HWND *phwnd);
  HRESULT (__stdcall *ContextSensitiveHelp)(IOleInPlaceActiveObject *This, BOOL fEnterMode);
  HRESULT (__stdcall *TranslateAcceleratorA)(IOleInPlaceActiveObject *This, LPMSG lpmsg);
  HRESULT (__stdcall *OnFrameWindowActivate)(IOleInPlaceActiveObject *This, BOOL fActivate);
  HRESULT (__stdcall *OnDocWindowActivate)(IOleInPlaceActiveObject *This, BOOL fActivate);
  HRESULT (__stdcall *ResizeBorder)(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow);
  HRESULT (__stdcall *EnableModeless)(IOleInPlaceActiveObject *This, BOOL fEnable);
};
#pragma pack(pop)

/* 510 */
struct CToolBar;

/* 511 */
struct _TBBUTTON
{
  int iBitmap;
  int idCommand;
  BYTE fsState;
  BYTE fsStyle;
  BYTE bReserved[2];
  DWORD_PTR dwData;
  INT_PTR iString;
};

/* 512 */
struct CToolBarCtrl;

/* 513 */
struct COleVariant;

/* 514 */
struct ATL::CFixedStringMgr;

/* 515 */
struct Concurrency::details::SchedulerBase;

/* 516 */
struct CControlBar;

/* 517 */
struct Concurrency::details::UMSThreadVirtualProcessor;

/* 518 */
struct CPushRoutingFrame;

/* 519 */
struct CMFCVisualManager;

/* 520 */
struct CButton;

/* 521 */
struct CMFCOutlookBarTabCtrl;

/* 522 */
struct CMFCToolBarSystemMenuButton;

/* 523 */
struct CMFCVisualManagerOffice2007;

/* 524 */
struct CMFCVisualManagerBitmapCache;

/* 525 */
struct Concurrency::details::UMSSchedulerProxy;

/* 526 */
struct CMFCToolTipCtrl;

/* 527 */
struct CObList;

/* 528 */
struct CUserTool;

/* 529 */
struct CMFCRibbonBaseElement;

/* 530 */
struct Concurrency::details::SchedulerProxy;

/* 531 */
struct CMFCDisableMenuAnimation;

/* 532 */
struct CMFCRibbonCmdUI;

/* 533 */
struct CMFCRibbonButton;

/* 534 */
struct CView;

/* 535 */
struct CPushRoutingView;

/* 536 */
struct Concurrency::details::ScheduleGroupSegmentBase;

/* 537 */
struct CPaneDivider;

/* 538 */
struct CSmartDockingManager;

/* 539 */
struct CFullScreenImpl;

/* 540 */
struct CDocItem;

/* 541 */
struct CMDIFrameWnd;

/* 542 */
struct CMDIChildWnd;

/* 543 */
struct CMFCToolBarComboBoxButton;

/* 544 */
struct CMFCTabCtrl;

/* 545 */
struct CMFCBaseTabCtrl;

/* 546 */
struct CDockablePane;

/* 547 */
struct CMFCCaptionBar;

/* 548 */
struct CMFCReBar;

/* 549 */
struct CMFCRibbonGallery;

/* 550 */
struct CMFCToolBarMenuButton;

/* 551 */
struct CDockBar;

/* 552 */
struct CMFCDropDownToolBar;

/* 553 */
struct CMFCDropDownFrame;

/* 554 */
struct CMFCDropDownToolbarButton;

/* 555 */
struct CMFCCustomizeButton;

/* 556 */
struct CBasePane;

/* 557 */
struct CAccessibilityData;

/* 558 */
struct CMFCCmdUsageCount;

/* 559 */
struct CDockingPanesRow;

/* 560 */
struct CEdit;

/* 561 */
struct CMFCTabInfo;

/* 562 */
struct COleDataSource;

/* 563 */
enum __bitmask tagDATADIR
{
  DATADIR_GET = 0x1,
  DATADIR_SET = 0x2,
};

/* 564 */
struct COleDataSource::XDataObject;

/* 565 */
struct COleDropSource;

/* 566 */
struct COleDropSource::XDropSource;

/* 567 */
struct tagTRACKMOUSEEVENT
{
  DWORD cbSize;
  DWORD dwFlags;
  HWND hwndTrack;
  DWORD dwHoverTime;
};

/* 568 */
struct CMFCToolBarMenuButtonsButton;

/* 569 */
struct CMiniFrameWnd;

/* 570 */
struct CMFCToolBarDropSource;

/* 571 */
struct CGlobalUtils;

/* 572 */
struct CPaneContainerManager;

/* 573 */
struct CPaneContainer;

/* 574 */
struct CPaneContainerGC;

/* 575 */
struct COleDataObject;

/* 576 */
struct CSharedFile;

/* 577 */
struct CSyncObject;

/* 578 */
struct CVariantBoolPair;

/* 579 */
struct CVariantBoolConverter;

/* 580 */
struct COleDispatchException;

/* 581 */
struct CEnumArray;

/* 582 */
struct CEnumArray::XEnumVOID;

/* 583 */
struct COleDispatchDriver;

/* 584 */
struct COleDispParams;

/* 585 */
struct OLE_DATA;

/* 586 */
struct CFixedAllocNoSync;

/* 587 */
struct CMFCOutlookBarPaneButton;

/* 588 */
struct Concurrency::details::WorkQueue;

/* 589 */
struct CAnimationVariable;

/* 590 */
struct CRichEditCtrl;

/* 591 */
struct CSpinButtonCtrl;

/* 592 */
struct CMFCRibbonRichEditCtrl;

/* 593 */
struct CMFCDragFrameImpl;

/* 594 */
struct CRecentPaneContainerInfo;

/* 595 */
struct CRecentDockSiteInfo;

/* 596 */
struct COleIPFrameWnd;

/* 597 */
struct CMFCVisualManagerOffice2003;

/* 598 */
struct CMFCVisualManagerOfficeXP;

/* 599 */
struct CMFCPopupMenu;

/* 600 */
struct CPalette;

/* 601 */
struct CMFCToolBarColorButton;

/* 602 */
struct CMFCRibbonQuickAccessToolBarDefaultState;

/* 603 */
struct CMFCControlRenderer;

/* 604 */
struct CMFCCaptionMenuButton;

/* 605 */
struct CStatic;

/* 606 */
struct CPropertySheet;

/* 607 */
struct CDialogImpl;

/* 608 */
struct COleClientItem;

/* 609 */
enum tagOLECLOSE
{
  OLECLOSE_SAVEIFDIRTY = 0x0,
  OLECLOSE_NOSAVE = 0x1,
  OLECLOSE_PROMPTSAVE = 0x2,
};

/* 610 */
struct _AFX_OLE_STATE;

/* 611 */
struct CDocument;

/* 612 */
struct CSmartDockingStandaloneGuide;

/* 613 */
struct CSmartDockingGroupGuidesManager;

/* 614 */
struct COleStreamFile;

/* 615 */
struct CPreviewView;

/* 616 */
struct CScrollView;

/* 617 */
struct _AFX_MOUSEANCHORWND;

/* 618 */
struct CMFCImageEditorDialog;

/* 619 */
struct COleDropTarget;

/* 620 */
struct COleDropTarget::XDropTarget;

/* 621 */
struct COleObjectFactory;

/* 622 */
struct COleMessageFilter;

/* 623 */
struct COleMessageFilter::XMessageFilter;

/* 624 */
struct COleServerDoc;

/* 625 */
struct CMFCToolBarEditBoxButton;

/* 626 */
struct CEditView;

/* 627 */
struct CCheckListBox;

/* 628 */
struct tagDRAWITEMSTRUCT
{
  UINT CtlType;
  UINT CtlID;
  UINT itemID;
  UINT itemAction;
  UINT itemState;
  HWND hwndItem;
  HDC hDC;
  RECT rcItem;
  ULONG_PTR itemData;
};

/* 629 */
struct _AFX_COLOR_STATE;

/* 630 */
struct CMFCColorMenuButton;

/* 631 */
struct CMFCTasksPanePropertyPage;

/* 632 */
struct _AFX_PROPPAGEFONTINFO;

/* 633 */
struct CPreviewDC;

/* 634 */
struct COleDialog;

/* 635 */
struct CMFCColorPickerCtrl;

/* 636 */
struct std::exception;

/* 637 */
struct exception;

/* 638 */
struct ATL::CComCriticalSection;

/* 639 */
struct ATL::Checked;

/* 640 */
struct AFX_MAINTAIN_STATE2;

/* 641 */
struct CInternalGlobalLock;

/* 642 */
struct CDlgGroupRadioButtonIterator;

/* 643 */
struct AFX_MODULE_STATE;

/* 644 */
struct CDataExchange;

/* 645 */
struct COleException;

/* 646 */
struct CControlBarInfo;

/* 647 */
struct CMFCToolBarCmdUI;

/* 648 */
struct CMFCToolBar;

/* 649 */
struct AFX_AUTOHIDE_DOCKSITE_SAVE_INFO;

/* 650 */
struct Gdiplus::Bitmap;

/* 651 */
struct CCriticalSection;

/* 652 */
struct ATL::_ATL_SAFE_ALLOCA_IMPL;

/* 653 */
struct Gdiplus::Graphics;

/* 654 */
typedef BYTE Image;

/* 655 */
struct CDialogTemplate;

/* 656 */
struct CHandleMap;

/* 657 */
struct CStringList;

/* 658 */
struct CMFCMenuBar;

/* 659 */
struct Concurrency::details::SingleWaitBlock;

/* 660 */
struct CDockSite;

/* 661 */
struct CEnumFormatEtc;

/* 662 */
struct CMFCAutoHideBar;

/* 663 */
struct CByteArray;

/* 664 */
struct CMFCOutlookBarPane;

/* 665 */
struct CMFCOutlookBarToolBar;

/* 666 */
struct _AFX_RICHEDIT_STATE;

/* 667 */
struct CStringArray;

/* 668 */
struct std::bad_alloc;

/* 669 */
struct CMFCVisualManagerWindows7;

/* 670 */
struct CMenuHash;

/* 671 */
struct CMFCToolBarsListCheckBox;

/* 672 */
struct CCellObj;

/* 673 */
struct CMouseManager;

/* 674 */
struct CPaneFrameWnd;

/* 675 */
struct CMultiPaneFrameWnd;

/* 676 */
struct COleControlSiteFactory;

/* 677 */
struct CProgressCtrl;

/* 678 */
struct CComCtlWrapper;

/* 679 */
struct CCommDlgWrapper;

/* 680 */
struct CImageList;

/* 681 */
struct CWaitCursor;

/* 682 */
struct CShellWrapper;

/* 683 */
typedef struct tagWNDCLASSW WNDCLASSW;

/* 684 */
struct _AFX_BASE_MODULE_STATE;

/* 685 */
struct CFont;

/* 686 */
struct CChevronOwnerDrawMenu;

/* 687 */
struct CSimpleException;

/* 688 */
struct CPaintDC;

/* 689 */
struct CBrush;

/* 690 */
struct CBitmap;

/* 691 */
struct CPen;

/* 692 */
struct CCommonDialog;

/* 693 */
struct CFileDialog::XFileDialogEvents;

/* 694 */
struct CFileDialog::XFileDialogControlEvents;

/* 695 */
struct CFileDialog;

/* 696 */
struct CFile;

/* 697 */
struct CMFCControlBarImpl;

/* 698 */
struct AFX_GLOBAL_DATA;

/* 700 */
typedef struct tagLOGFONTW LOGFONTW;

/* 699 */
struct tagNONCLIENTMETRICSW
{
  UINT cbSize;
  int iBorderWidth;
  int iScrollWidth;
  int iScrollHeight;
  int iCaptionWidth;
  int iCaptionHeight;
  LOGFONTW lfCaptionFont;
  int iSmCaptionWidth;
  int iSmCaptionHeight;
  LOGFONTW lfSmCaptionFont;
  int iMenuWidth;
  int iMenuHeight;
  LOGFONTW lfMenuFont;
  LOGFONTW lfStatusFont;
  LOGFONTW lfMessageFont;
  int iPaddedBorderWidth;
};

/* 701 */
struct ATL::CComBSTR;

/* 702 */
struct CMemDC;

/* 703 */
struct CKeyboardManager;

/* 704 */
struct CFrameWndEx;

/* 705 */
struct tagWINDOWPOS
{
  HWND hwnd;
  HWND hwndInsertAfter;
  int x;
  int y;
  int cx;
  int cy;
  UINT flags;
};

/* 706 */
struct _IMAGEINFO
{
  HBITMAP hbmImage;
  HBITMAP hbmMask;
  int Unused1;
  int Unused2;
  RECT rcImage;
};

/* 707 */
struct ATL::CImage;

/* 708 */
struct CEnumUnknown;

/* 709 */
struct ATL::COleDateTime;

/* 710 */
struct COleControlSite::XPropertyNotifySink;

/* 711 */
struct COleControlSite::XBoundObjectSite;

/* 712 */
struct COleControlSite::XNotifyDBEvents;

/* 713 */
struct COleControlSite::XRowsetNotify;

/* 714 */
struct ATL::CTime;

/* 715 */
struct COleDocIPFrameWndEx;

/* 716 */
struct COleIPFrameWndEx;

/* 717 */
struct CMFCVisualManagerBitmapCache::CMFCVisualManagerBitmapCacheItem;

/* 718 */
struct Concurrency::details::_NonReentrantPPLLock;

/* 719 */
struct CMFCPopupMenuBar;

/* 720 */
struct CDaoRelationInfo;

/* 721 */
struct CMFCPrintPreviewToolBar;

/* 722 */
struct CPreviewViewEx;

/* 723 */
struct CMDITabInfo;

/* 724 */
struct CMDIClientAreaWnd;

/* 725 */
struct CHelpComboBoxButton;

/* 726 */
struct CMFCTabButton;

/* 727 */
struct CMiniDockFrameWnd;

/* 728 */
struct CMFCCustomizeMenuButton;

/* 729 */
struct CMFCCaptionButton;

/* 730 */
struct CMFCToolBarsCustomizeDialog;

/* 731 */
struct CTabbedPane;

/* 732 */
struct CObArray;

/* 733 */
struct CMFCShowAllButton;

/* 734 */
struct CMFCRibbonEdit;

/* 735 */
struct CMFCRibbonInfo::XElementEdit;

/* 736 */
struct COleDocIPFrameWnd;

/* 737 */
struct COleCntrFrameWnd;

/* 738 */
struct CMFCRibbonPanelMenuBar;

/* 739 */
struct CMFCButton;

/* 740 */
struct COutlookOptionsDlg;

/* 741 */
struct CMFCColorBar;

/* 742 */
struct CMFCTasksPaneFrameWnd;

/* 743 */
struct CMFCShadowRenderer;

/* 744 */
struct CMFCControlRendererInfo;

/* 745 */
struct CMFCRibbonLaunchButton;

/* 746 */
struct CMFCRibbonPanel;

/* 747 */
struct CMFCRibbonMainPanel;

/* 748 */
struct CTagManager;

/* 749 */
struct CMFCRibbonMiniToolBar;

/* 750 */
struct CMFCRibbonKeyTip;

/* 751 */
struct CMFCRibbonLabel;

/* 752 */
struct CPrintInfo;

/* 753 */
struct CMFCImagePaintArea;

/* 754 */
struct CMFCToolBarsOptionsPropertyPage;

/* 755 */
struct CMFCToolBarsToolsPropertyPage;

/* 756 */
struct COleDocument;

/* 757 */
struct CMFCToolBarButtonsListButton;

/* 758 */
#pragma pack(push, 8)
struct _DLLVERSIONINFO
{
  DWORD cbSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformID;
};
#pragma pack(pop)

/* 759 */
struct _AFX_CHECKLIST_STATE;

/* 760 */
struct CColorDialog;

/* 761 */
struct CTasksPaneNavigateButton;

/* 762 */
struct CTasksPaneHistoryButton;

/* 763 */
struct CTasksPaneMenuButton;

/* 764 */
struct CMFCTasksPane;

/* 765 */
struct CMFCTasksPaneToolBar;

/* 766 */
struct _AFX_EDIT_STATE;

/* 767 */
struct CMFCToolBarNameDialog;

/* 768 */
struct CVSListBoxBase;

/* 769 */
struct COleBusyDialog;

/* 770 */
struct CMFCEditBrowseCtrl;

/* 771 */
struct CMFCColorPropertySheet;

/* 772 */
struct _LocaleUpdate;

/* 774 */
typedef int __ehstate_t;

/* 773 */
#pragma pack(push, 4)
struct EHRegistrationNode
{
  EHRegistrationNode *pNext;
  void *frameHandler;
  __ehstate_t state;
};
#pragma pack(pop)

/* 775 */
struct CClientDC;

/* 776 */
struct CUIntArray;

/* 777 */
struct CPtrArray;

/* 778 */
struct CStdioFile;

